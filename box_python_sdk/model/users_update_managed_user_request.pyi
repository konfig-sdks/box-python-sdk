# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class UsersUpdateManagedUserRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class enterprise(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enterprise':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            notify = schemas.BoolSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            login = schemas.StrSchema
            
            
            class role(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COADMIN(cls):
                    return cls("coadmin")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            language = schemas.StrSchema
            is_sync_enabled = schemas.BoolSchema
            
            
            class job_title(
                schemas.StrSchema
            ):
                pass
            
            
            class phone(
                schemas.StrSchema
            ):
                pass
            
            
            class address(
                schemas.StrSchema
            ):
                pass
            
            
            class tracking_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TrackingCode']:
                        return TrackingCode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TrackingCode'], typing.List['TrackingCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tracking_codes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TrackingCode':
                    return super().__getitem__(i)
            can_see_managed_users = schemas.BoolSchema
            timezone = schemas.StrSchema
            is_external_collab_restricted = schemas.BoolSchema
            is_exempt_from_device_limits = schemas.BoolSchema
            is_exempt_from_login_verification = schemas.BoolSchema
            is_password_reset_required = schemas.BoolSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
                
                @schemas.classproperty
                def CANNOT_DELETE_EDIT(cls):
                    return cls("cannot_delete_edit")
                
                @schemas.classproperty
                def CANNOT_DELETE_EDIT_UPLOAD(cls):
                    return cls("cannot_delete_edit_upload")
            space_amount = schemas.Int64Schema
        
            @staticmethod
            def notification_email() -> typing.Type['UsersUpdateManagedUserRequestNotificationEmail']:
                return UsersUpdateManagedUserRequestNotificationEmail
            external_app_user_id = schemas.StrSchema
            __annotations__ = {
                "enterprise": enterprise,
                "notify": notify,
                "name": name,
                "login": login,
                "role": role,
                "language": language,
                "is_sync_enabled": is_sync_enabled,
                "job_title": job_title,
                "phone": phone,
                "address": address,
                "tracking_codes": tracking_codes,
                "can_see_managed_users": can_see_managed_users,
                "timezone": timezone,
                "is_external_collab_restricted": is_external_collab_restricted,
                "is_exempt_from_device_limits": is_exempt_from_device_limits,
                "is_exempt_from_login_verification": is_exempt_from_login_verification,
                "is_password_reset_required": is_password_reset_required,
                "status": status,
                "space_amount": space_amount,
                "notification_email": notification_email,
                "external_app_user_id": external_app_user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterprise"]) -> MetaOapg.properties.enterprise: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify"]) -> MetaOapg.properties.notify: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login"]) -> MetaOapg.properties.login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_sync_enabled"]) -> MetaOapg.properties.is_sync_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_codes"]) -> MetaOapg.properties.tracking_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_see_managed_users"]) -> MetaOapg.properties.can_see_managed_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_external_collab_restricted"]) -> MetaOapg.properties.is_external_collab_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_exempt_from_device_limits"]) -> MetaOapg.properties.is_exempt_from_device_limits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_exempt_from_login_verification"]) -> MetaOapg.properties.is_exempt_from_login_verification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_password_reset_required"]) -> MetaOapg.properties.is_password_reset_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["space_amount"]) -> MetaOapg.properties.space_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification_email"]) -> 'UsersUpdateManagedUserRequestNotificationEmail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_app_user_id"]) -> MetaOapg.properties.external_app_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enterprise", "notify", "name", "login", "role", "language", "is_sync_enabled", "job_title", "phone", "address", "tracking_codes", "can_see_managed_users", "timezone", "is_external_collab_restricted", "is_exempt_from_device_limits", "is_exempt_from_login_verification", "is_password_reset_required", "status", "space_amount", "notification_email", "external_app_user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterprise"]) -> typing.Union[MetaOapg.properties.enterprise, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify"]) -> typing.Union[MetaOapg.properties.notify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login"]) -> typing.Union[MetaOapg.properties.login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_sync_enabled"]) -> typing.Union[MetaOapg.properties.is_sync_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_codes"]) -> typing.Union[MetaOapg.properties.tracking_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_see_managed_users"]) -> typing.Union[MetaOapg.properties.can_see_managed_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_external_collab_restricted"]) -> typing.Union[MetaOapg.properties.is_external_collab_restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_exempt_from_device_limits"]) -> typing.Union[MetaOapg.properties.is_exempt_from_device_limits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_exempt_from_login_verification"]) -> typing.Union[MetaOapg.properties.is_exempt_from_login_verification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_password_reset_required"]) -> typing.Union[MetaOapg.properties.is_password_reset_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["space_amount"]) -> typing.Union[MetaOapg.properties.space_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification_email"]) -> typing.Union['UsersUpdateManagedUserRequestNotificationEmail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_app_user_id"]) -> typing.Union[MetaOapg.properties.external_app_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enterprise", "notify", "name", "login", "role", "language", "is_sync_enabled", "job_title", "phone", "address", "tracking_codes", "can_see_managed_users", "timezone", "is_external_collab_restricted", "is_exempt_from_device_limits", "is_exempt_from_login_verification", "is_password_reset_required", "status", "space_amount", "notification_email", "external_app_user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enterprise: typing.Union[MetaOapg.properties.enterprise, None, str, schemas.Unset] = schemas.unset,
        notify: typing.Union[MetaOapg.properties.notify, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        login: typing.Union[MetaOapg.properties.login, str, schemas.Unset] = schemas.unset,
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        is_sync_enabled: typing.Union[MetaOapg.properties.is_sync_enabled, bool, schemas.Unset] = schemas.unset,
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        tracking_codes: typing.Union[MetaOapg.properties.tracking_codes, list, tuple, schemas.Unset] = schemas.unset,
        can_see_managed_users: typing.Union[MetaOapg.properties.can_see_managed_users, bool, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        is_external_collab_restricted: typing.Union[MetaOapg.properties.is_external_collab_restricted, bool, schemas.Unset] = schemas.unset,
        is_exempt_from_device_limits: typing.Union[MetaOapg.properties.is_exempt_from_device_limits, bool, schemas.Unset] = schemas.unset,
        is_exempt_from_login_verification: typing.Union[MetaOapg.properties.is_exempt_from_login_verification, bool, schemas.Unset] = schemas.unset,
        is_password_reset_required: typing.Union[MetaOapg.properties.is_password_reset_required, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        space_amount: typing.Union[MetaOapg.properties.space_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notification_email: typing.Union['UsersUpdateManagedUserRequestNotificationEmail', schemas.Unset] = schemas.unset,
        external_app_user_id: typing.Union[MetaOapg.properties.external_app_user_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersUpdateManagedUserRequest':
        return super().__new__(
            cls,
            *args,
            enterprise=enterprise,
            notify=notify,
            name=name,
            login=login,
            role=role,
            language=language,
            is_sync_enabled=is_sync_enabled,
            job_title=job_title,
            phone=phone,
            address=address,
            tracking_codes=tracking_codes,
            can_see_managed_users=can_see_managed_users,
            timezone=timezone,
            is_external_collab_restricted=is_external_collab_restricted,
            is_exempt_from_device_limits=is_exempt_from_device_limits,
            is_exempt_from_login_verification=is_exempt_from_login_verification,
            is_password_reset_required=is_password_reset_required,
            status=status,
            space_amount=space_amount,
            notification_email=notification_email,
            external_app_user_id=external_app_user_id,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.tracking_code import TrackingCode
from box_python_sdk.model.users_update_managed_user_request_notification_email import UsersUpdateManagedUserRequestNotificationEmail
