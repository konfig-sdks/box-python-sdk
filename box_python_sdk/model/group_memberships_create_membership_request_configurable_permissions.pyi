# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class GroupMembershipsCreateMembershipRequestConfigurablePermissions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Custom configuration for the permissions an admin
if a group will receive. This option has no effect
on members with a role of `member`.

Setting these permissions overwrites the default
access levels of an admin.

Specifying a value of "null" for this object will disable
all configurable permissions. Specifying permissions will set
them accordingly, omitted permissions will be enabled by default.
    """


    class MetaOapg:
        additional_properties = schemas.BoolSchema
    
    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, bool, ],
    ) -> 'GroupMembershipsCreateMembershipRequestConfigurablePermissions':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
