# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class MetadataTemplate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A template for metadata that can be applied to files and folders
    """


    class MetaOapg:
        required = {
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "metadata_template": "METADATA_TEMPLATE",
                    }
                
                @schemas.classproperty
                def METADATA_TEMPLATE(cls):
                    return cls("metadata_template")
            scope = schemas.StrSchema
            
            
            class templateKey(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    regex=[{
                        'pattern': r'^[a-zA-Z_][-a-zA-Z0-9_]*$',
                    }]
            
            
            class displayName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
            hidden = schemas.BoolSchema
        
            @staticmethod
            def fields() -> typing.Type['MetadataTemplateFields']:
                return MetadataTemplateFields
            copyInstanceOnItemCopy = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "scope": scope,
                "templateKey": templateKey,
                "displayName": displayName,
                "hidden": hidden,
                "fields": fields,
                "copyInstanceOnItemCopy": copyInstanceOnItemCopy,
            }
    
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateKey"]) -> MetaOapg.properties.templateKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'MetadataTemplateFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyInstanceOnItemCopy"]) -> MetaOapg.properties.copyInstanceOnItemCopy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "scope", "templateKey", "displayName", "hidden", "fields", "copyInstanceOnItemCopy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateKey"]) -> typing.Union[MetaOapg.properties.templateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['MetadataTemplateFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyInstanceOnItemCopy"]) -> typing.Union[MetaOapg.properties.copyInstanceOnItemCopy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "scope", "templateKey", "displayName", "hidden", "fields", "copyInstanceOnItemCopy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        scope: typing.Union[MetaOapg.properties.scope, str, schemas.Unset] = schemas.unset,
        templateKey: typing.Union[MetaOapg.properties.templateKey, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        fields: typing.Union['MetadataTemplateFields', schemas.Unset] = schemas.unset,
        copyInstanceOnItemCopy: typing.Union[MetaOapg.properties.copyInstanceOnItemCopy, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetadataTemplate':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            scope=scope,
            templateKey=templateKey,
            displayName=displayName,
            hidden=hidden,
            fields=fields,
            copyInstanceOnItemCopy=copyInstanceOnItemCopy,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.metadata_template_fields import MetadataTemplateFields
