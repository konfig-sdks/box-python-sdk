# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class MetadataTemplatesUpdateSchemaRequestItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a
change to make to the metadata instance.
    """


    class MetaOapg:
        required = {
            "op",
        }
        
        class properties:
            
            
            class op(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EDIT_TEMPLATE(cls):
                    return cls("editTemplate")
                
                @schemas.classproperty
                def ADD_FIELD(cls):
                    return cls("addField")
                
                @schemas.classproperty
                def REORDER_FIELDS(cls):
                    return cls("reorderFields")
                
                @schemas.classproperty
                def ADD_ENUM_OPTION(cls):
                    return cls("addEnumOption")
                
                @schemas.classproperty
                def REORDER_ENUM_OPTIONS(cls):
                    return cls("reorderEnumOptions")
                
                @schemas.classproperty
                def REORDER_MULTI_SELECT_OPTIONS(cls):
                    return cls("reorderMultiSelectOptions")
                
                @schemas.classproperty
                def ADD_MULTI_SELECT_OPTION(cls):
                    return cls("addMultiSelectOption")
                
                @schemas.classproperty
                def EDIT_FIELD(cls):
                    return cls("editField")
                
                @schemas.classproperty
                def REMOVE_FIELD(cls):
                    return cls("removeField")
                
                @schemas.classproperty
                def EDIT_ENUM_OPTION(cls):
                    return cls("editEnumOption")
                
                @schemas.classproperty
                def REMOVE_ENUM_OPTION(cls):
                    return cls("removeEnumOption")
                
                @schemas.classproperty
                def EDIT_MULTI_SELECT_OPTION(cls):
                    return cls("editMultiSelectOption")
                
                @schemas.classproperty
                def REMOVE_MULTI_SELECT_OPTION(cls):
                    return cls("removeMultiSelectOption")
        
            @staticmethod
            def data() -> typing.Type['MetadataTemplatesUpdateSchemaRequestItemData']:
                return MetadataTemplatesUpdateSchemaRequestItemData
            fieldKey = schemas.StrSchema
        
            @staticmethod
            def fieldKeys() -> typing.Type['MetadataTemplatesUpdateSchemaRequestItemFieldKeys']:
                return MetadataTemplatesUpdateSchemaRequestItemFieldKeys
            enumOptionKey = schemas.StrSchema
        
            @staticmethod
            def enumOptionKeys() -> typing.Type['MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys']:
                return MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys
            multiSelectOptionKey = schemas.StrSchema
        
            @staticmethod
            def multiSelectOptionKeys() -> typing.Type['MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys']:
                return MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys
            __annotations__ = {
                "op": op,
                "data": data,
                "fieldKey": fieldKey,
                "fieldKeys": fieldKeys,
                "enumOptionKey": enumOptionKey,
                "enumOptionKeys": enumOptionKeys,
                "multiSelectOptionKey": multiSelectOptionKey,
                "multiSelectOptionKeys": multiSelectOptionKeys,
            }
    
    op: MetaOapg.properties.op
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["op"]) -> MetaOapg.properties.op: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'MetadataTemplatesUpdateSchemaRequestItemData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldKey"]) -> MetaOapg.properties.fieldKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldKeys"]) -> 'MetadataTemplatesUpdateSchemaRequestItemFieldKeys': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enumOptionKey"]) -> MetaOapg.properties.enumOptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enumOptionKeys"]) -> 'MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiSelectOptionKey"]) -> MetaOapg.properties.multiSelectOptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiSelectOptionKeys"]) -> 'MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["op", "data", "fieldKey", "fieldKeys", "enumOptionKey", "enumOptionKeys", "multiSelectOptionKey", "multiSelectOptionKeys", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["op"]) -> MetaOapg.properties.op: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union['MetadataTemplatesUpdateSchemaRequestItemData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldKey"]) -> typing.Union[MetaOapg.properties.fieldKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldKeys"]) -> typing.Union['MetadataTemplatesUpdateSchemaRequestItemFieldKeys', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enumOptionKey"]) -> typing.Union[MetaOapg.properties.enumOptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enumOptionKeys"]) -> typing.Union['MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiSelectOptionKey"]) -> typing.Union[MetaOapg.properties.multiSelectOptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiSelectOptionKeys"]) -> typing.Union['MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["op", "data", "fieldKey", "fieldKeys", "enumOptionKey", "enumOptionKeys", "multiSelectOptionKey", "multiSelectOptionKeys", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        op: typing.Union[MetaOapg.properties.op, str, ],
        data: typing.Union['MetadataTemplatesUpdateSchemaRequestItemData', schemas.Unset] = schemas.unset,
        fieldKey: typing.Union[MetaOapg.properties.fieldKey, str, schemas.Unset] = schemas.unset,
        fieldKeys: typing.Union['MetadataTemplatesUpdateSchemaRequestItemFieldKeys', schemas.Unset] = schemas.unset,
        enumOptionKey: typing.Union[MetaOapg.properties.enumOptionKey, str, schemas.Unset] = schemas.unset,
        enumOptionKeys: typing.Union['MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys', schemas.Unset] = schemas.unset,
        multiSelectOptionKey: typing.Union[MetaOapg.properties.multiSelectOptionKey, str, schemas.Unset] = schemas.unset,
        multiSelectOptionKeys: typing.Union['MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetadataTemplatesUpdateSchemaRequestItem':
        return super().__new__(
            cls,
            *args,
            op=op,
            data=data,
            fieldKey=fieldKey,
            fieldKeys=fieldKeys,
            enumOptionKey=enumOptionKey,
            enumOptionKeys=enumOptionKeys,
            multiSelectOptionKey=multiSelectOptionKey,
            multiSelectOptionKeys=multiSelectOptionKeys,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.metadata_templates_update_schema_request_item_data import MetadataTemplatesUpdateSchemaRequestItemData
from box_python_sdk.model.metadata_templates_update_schema_request_item_enum_option_keys import MetadataTemplatesUpdateSchemaRequestItemEnumOptionKeys
from box_python_sdk.model.metadata_templates_update_schema_request_item_field_keys import MetadataTemplatesUpdateSchemaRequestItemFieldKeys
from box_python_sdk.model.metadata_templates_update_schema_request_item_multi_select_option_keys import MetadataTemplatesUpdateSchemaRequestItemMultiSelectOptionKeys
