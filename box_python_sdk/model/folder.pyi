# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class Folder(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A standard representation of a folder, as returned from any
folder API endpoints by default
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class description(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.StrSchema
                            ):
                                pass
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'description':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class created_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'created_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class modified_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'modified_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    size = schemas.Int64Schema
                    
                    
                    class path_collection(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "entries",
                                        "total_count",
                                    }
                                    
                                    class properties:
                                        total_count = schemas.Int64Schema
                                        
                                        
                                        class entries(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['FolderMini']:
                                                    return FolderMini
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple['FolderMini'], typing.List['FolderMini']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'entries':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'FolderMini':
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "total_count": total_count,
                                            "entries": entries,
                                        }
                                
                                entries: MetaOapg.properties.entries
                                total_count: MetaOapg.properties.total_count
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_count", "entries", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_count", "entries", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    entries: typing.Union[MetaOapg.properties.entries, list, tuple, ],
                                    total_count: typing.Union[MetaOapg.properties.total_count, decimal.Decimal, int, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        entries=entries,
                                        total_count=total_count,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'path_collection':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class created_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserMini,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'created_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class modified_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserMini,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'modified_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class trashed_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'trashed_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class purged_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'purged_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class content_created_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'content_created_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class content_modified_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'content_modified_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class owned_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserMini,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'owned_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class shared_link(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "is_password_enabled",
                                        "effective_access",
                                        "effective_permission",
                                        "accessed",
                                        "preview_count",
                                        "url",
                                        "download_count",
                                    }
                                    
                                    class properties:
                                        url = schemas.StrSchema
                                        
                                        
                                        class download_url(
                                            schemas.StrBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneStrMixin
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                format = 'url'
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[None, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'download_url':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                )
                                        
                                        
                                        class vanity_url(
                                            schemas.StrBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneStrMixin
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                format = 'url'
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[None, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'vanity_url':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                )
                                        
                                        
                                        class vanity_name(
                                            schemas.StrBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneStrMixin
                                        ):
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[None, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'vanity_name':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                )
                                        
                                        
                                        class access(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def OPEN(cls):
                                                return cls("open")
                                            
                                            @schemas.classproperty
                                            def COMPANY(cls):
                                                return cls("company")
                                            
                                            @schemas.classproperty
                                            def COLLABORATORS(cls):
                                                return cls("collaborators")
                                        
                                        
                                        class effective_access(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def OPEN(cls):
                                                return cls("open")
                                            
                                            @schemas.classproperty
                                            def COMPANY(cls):
                                                return cls("company")
                                            
                                            @schemas.classproperty
                                            def COLLABORATORS(cls):
                                                return cls("collaborators")
                                        
                                        
                                        class effective_permission(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def CAN_EDIT(cls):
                                                return cls("can_edit")
                                            
                                            @schemas.classproperty
                                            def CAN_DOWNLOAD(cls):
                                                return cls("can_download")
                                            
                                            @schemas.classproperty
                                            def CAN_PREVIEW(cls):
                                                return cls("can_preview")
                                            
                                            @schemas.classproperty
                                            def NO_ACCESS(cls):
                                                return cls("no_access")
                                        
                                        
                                        class unshared_at(
                                            schemas.DateTimeBase,
                                            schemas.StrBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneStrMixin
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                format = 'date-time'
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[None, str, datetime, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'unshared_at':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                )
                                        is_password_enabled = schemas.BoolSchema
                                        
                                        
                                        class permissions(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "can_edit",
                                                    "can_preview",
                                                    "can_download",
                                                }
                                                
                                                class properties:
                                                    can_download = schemas.BoolSchema
                                                    can_preview = schemas.BoolSchema
                                                    can_edit = schemas.BoolSchema
                                                    __annotations__ = {
                                                        "can_download": can_download,
                                                        "can_preview": can_preview,
                                                        "can_edit": can_edit,
                                                    }
                                            
                                            can_edit: MetaOapg.properties.can_edit
                                            can_preview: MetaOapg.properties.can_preview
                                            can_download: MetaOapg.properties.can_download
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["can_preview"]) -> MetaOapg.properties.can_preview: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_download", "can_preview", "can_edit", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["can_preview"]) -> MetaOapg.properties.can_preview: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_download", "can_preview", "can_edit", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                                                can_preview: typing.Union[MetaOapg.properties.can_preview, bool, ],
                                                can_download: typing.Union[MetaOapg.properties.can_download, bool, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'permissions':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    can_edit=can_edit,
                                                    can_preview=can_preview,
                                                    can_download=can_download,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        download_count = schemas.IntSchema
                                        preview_count = schemas.IntSchema
                                        __annotations__ = {
                                            "url": url,
                                            "download_url": download_url,
                                            "vanity_url": vanity_url,
                                            "vanity_name": vanity_name,
                                            "access": access,
                                            "effective_access": effective_access,
                                            "effective_permission": effective_permission,
                                            "unshared_at": unshared_at,
                                            "is_password_enabled": is_password_enabled,
                                            "permissions": permissions,
                                            "download_count": download_count,
                                            "preview_count": preview_count,
                                        }
                                
                                is_password_enabled: MetaOapg.properties.is_password_enabled
                                effective_access: MetaOapg.properties.effective_access
                                effective_permission: MetaOapg.properties.effective_permission
                                accessed: schemas.AnyTypeSchema
                                preview_count: MetaOapg.properties.preview_count
                                url: MetaOapg.properties.url
                                download_count: MetaOapg.properties.download_count
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["vanity_url"]) -> MetaOapg.properties.vanity_url: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["vanity_name"]) -> MetaOapg.properties.vanity_name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["effective_access"]) -> MetaOapg.properties.effective_access: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["effective_permission"]) -> MetaOapg.properties.effective_permission: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["unshared_at"]) -> MetaOapg.properties.unshared_at: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_password_enabled"]) -> MetaOapg.properties.is_password_enabled: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["download_count"]) -> MetaOapg.properties.download_count: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["preview_count"]) -> MetaOapg.properties.preview_count: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "download_url", "vanity_url", "vanity_name", "access", "effective_access", "effective_permission", "unshared_at", "is_password_enabled", "permissions", "download_count", "preview_count", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["vanity_url"]) -> typing.Union[MetaOapg.properties.vanity_url, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["vanity_name"]) -> typing.Union[MetaOapg.properties.vanity_name, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["effective_access"]) -> MetaOapg.properties.effective_access: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["effective_permission"]) -> MetaOapg.properties.effective_permission: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["unshared_at"]) -> typing.Union[MetaOapg.properties.unshared_at, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_password_enabled"]) -> MetaOapg.properties.is_password_enabled: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["download_count"]) -> MetaOapg.properties.download_count: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["preview_count"]) -> MetaOapg.properties.preview_count: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "download_url", "vanity_url", "vanity_name", "access", "effective_access", "effective_permission", "unshared_at", "is_password_enabled", "permissions", "download_count", "preview_count", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    is_password_enabled: typing.Union[MetaOapg.properties.is_password_enabled, bool, ],
                                    effective_access: typing.Union[MetaOapg.properties.effective_access, str, ],
                                    effective_permission: typing.Union[MetaOapg.properties.effective_permission, str, ],
                                    accessed: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    preview_count: typing.Union[MetaOapg.properties.preview_count, decimal.Decimal, int, ],
                                    url: typing.Union[MetaOapg.properties.url, str, ],
                                    download_count: typing.Union[MetaOapg.properties.download_count, decimal.Decimal, int, ],
                                    download_url: typing.Union[MetaOapg.properties.download_url, None, str, schemas.Unset] = schemas.unset,
                                    vanity_url: typing.Union[MetaOapg.properties.vanity_url, None, str, schemas.Unset] = schemas.unset,
                                    vanity_name: typing.Union[MetaOapg.properties.vanity_name, None, str, schemas.Unset] = schemas.unset,
                                    access: typing.Union[MetaOapg.properties.access, str, schemas.Unset] = schemas.unset,
                                    unshared_at: typing.Union[MetaOapg.properties.unshared_at, None, str, datetime, schemas.Unset] = schemas.unset,
                                    permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        is_password_enabled=is_password_enabled,
                                        effective_access=effective_access,
                                        effective_permission=effective_permission,
                                        accessed=accessed,
                                        preview_count=preview_count,
                                        url=url,
                                        download_count=download_count,
                                        download_url=download_url,
                                        vanity_url=vanity_url,
                                        vanity_name=vanity_name,
                                        access=access,
                                        unshared_at=unshared_at,
                                        permissions=permissions,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'shared_link':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class folder_upload_email(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class access(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def OPEN(cls):
                                        return cls("open")
                                    
                                    @schemas.classproperty
                                    def COLLABORATORS(cls):
                                        return cls("collaborators")
                                email = schemas.StrSchema
                                __annotations__ = {
                                    "access": access,
                                    "email": email,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "email", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "email", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            access: typing.Union[MetaOapg.properties.access, str, schemas.Unset] = schemas.unset,
                            email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'folder_upload_email':
                            return super().__new__(
                                cls,
                                *args,
                                access=access,
                                email=email,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class parent(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FolderMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'parent':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class item_status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ACTIVE(cls):
                            return cls("active")
                        
                        @schemas.classproperty
                        def TRASHED(cls):
                            return cls("trashed")
                        
                        @schemas.classproperty
                        def DELETED(cls):
                            return cls("deleted")
                    
                    
                    class item_collection(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    Items,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'item_collection':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "description": description,
                        "created_at": created_at,
                        "modified_at": modified_at,
                        "size": size,
                        "path_collection": path_collection,
                        "created_by": created_by,
                        "modified_by": modified_by,
                        "trashed_at": trashed_at,
                        "purged_at": purged_at,
                        "content_created_at": content_created_at,
                        "content_modified_at": content_modified_at,
                        "owned_by": owned_by,
                        "shared_link": shared_link,
                        "folder_upload_email": folder_upload_email,
                        "parent": parent,
                        "item_status": item_status,
                        "item_collection": item_collection,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["path_collection"]) -> MetaOapg.properties.path_collection: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["trashed_at"]) -> MetaOapg.properties.trashed_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["purged_at"]) -> MetaOapg.properties.purged_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["content_created_at"]) -> MetaOapg.properties.content_created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["content_modified_at"]) -> MetaOapg.properties.content_modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["owned_by"]) -> MetaOapg.properties.owned_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shared_link"]) -> MetaOapg.properties.shared_link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["folder_upload_email"]) -> MetaOapg.properties.folder_upload_email: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["item_status"]) -> MetaOapg.properties.item_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["item_collection"]) -> MetaOapg.properties.item_collection: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "created_at", "modified_at", "size", "path_collection", "created_by", "modified_by", "trashed_at", "purged_at", "content_created_at", "content_modified_at", "owned_by", "shared_link", "folder_upload_email", "parent", "item_status", "item_collection", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["path_collection"]) -> typing.Union[MetaOapg.properties.path_collection, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_by"]) -> typing.Union[MetaOapg.properties.modified_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["trashed_at"]) -> typing.Union[MetaOapg.properties.trashed_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["purged_at"]) -> typing.Union[MetaOapg.properties.purged_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["content_created_at"]) -> typing.Union[MetaOapg.properties.content_created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["content_modified_at"]) -> typing.Union[MetaOapg.properties.content_modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["owned_by"]) -> typing.Union[MetaOapg.properties.owned_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shared_link"]) -> typing.Union[MetaOapg.properties.shared_link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["folder_upload_email"]) -> typing.Union[MetaOapg.properties.folder_upload_email, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["item_status"]) -> typing.Union[MetaOapg.properties.item_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["item_collection"]) -> typing.Union[MetaOapg.properties.item_collection, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "created_at", "modified_at", "size", "path_collection", "created_by", "modified_by", "trashed_at", "purged_at", "content_created_at", "content_modified_at", "owned_by", "shared_link", "folder_upload_email", "parent", "item_status", "item_collection", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, None, str, datetime, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, None, str, datetime, schemas.Unset] = schemas.unset,
                size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                path_collection: typing.Union[MetaOapg.properties.path_collection, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                modified_by: typing.Union[MetaOapg.properties.modified_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                trashed_at: typing.Union[MetaOapg.properties.trashed_at, None, str, datetime, schemas.Unset] = schemas.unset,
                purged_at: typing.Union[MetaOapg.properties.purged_at, None, str, datetime, schemas.Unset] = schemas.unset,
                content_created_at: typing.Union[MetaOapg.properties.content_created_at, None, str, datetime, schemas.Unset] = schemas.unset,
                content_modified_at: typing.Union[MetaOapg.properties.content_modified_at, None, str, datetime, schemas.Unset] = schemas.unset,
                owned_by: typing.Union[MetaOapg.properties.owned_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                shared_link: typing.Union[MetaOapg.properties.shared_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                folder_upload_email: typing.Union[MetaOapg.properties.folder_upload_email, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                parent: typing.Union[MetaOapg.properties.parent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                item_status: typing.Union[MetaOapg.properties.item_status, str, schemas.Unset] = schemas.unset,
                item_collection: typing.Union[MetaOapg.properties.item_collection, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    created_at=created_at,
                    modified_at=modified_at,
                    size=size,
                    path_collection=path_collection,
                    created_by=created_by,
                    modified_by=modified_by,
                    trashed_at=trashed_at,
                    purged_at=purged_at,
                    content_created_at=content_created_at,
                    content_modified_at=content_modified_at,
                    owned_by=owned_by,
                    shared_link=shared_link,
                    folder_upload_email=folder_upload_email,
                    parent=parent,
                    item_status=item_status,
                    item_collection=item_collection,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                FolderMini,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Folder':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.folder_mini import FolderMini
from box_python_sdk.model.items import Items
from box_python_sdk.model.user_mini import UserMini
