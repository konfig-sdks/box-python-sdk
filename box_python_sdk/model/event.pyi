# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The description of an event that happened within Box
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            recorded_at = schemas.DateTimeSchema
            event_id = schemas.StrSchema
            
            
            class created_by(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            UserMini,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'created_by':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class event_type(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ACCESS_GRANTED(cls):
                            return cls("ACCESS_GRANTED")
                        
                        @schemas.classproperty
                        def ACCESS_REVOKED(cls):
                            return cls("ACCESS_REVOKED")
                        
                        @schemas.classproperty
                        def ADD_DEVICE_ASSOCIATION(cls):
                            return cls("ADD_DEVICE_ASSOCIATION")
                        
                        @schemas.classproperty
                        def ADD_LOGIN_ACTIVITY_DEVICE(cls):
                            return cls("ADD_LOGIN_ACTIVITY_DEVICE")
                        
                        @schemas.classproperty
                        def ADMIN_LOGIN(cls):
                            return cls("ADMIN_LOGIN")
                        
                        @schemas.classproperty
                        def APPLICATION_CREATED(cls):
                            return cls("APPLICATION_CREATED")
                        
                        @schemas.classproperty
                        def APPLICATION_PUBLIC_KEY_ADDED(cls):
                            return cls("APPLICATION_PUBLIC_KEY_ADDED")
                        
                        @schemas.classproperty
                        def APPLICATION_PUBLIC_KEY_DELETED(cls):
                            return cls("APPLICATION_PUBLIC_KEY_DELETED")
                        
                        @schemas.classproperty
                        def CHANGE_ADMIN_ROLE(cls):
                            return cls("CHANGE_ADMIN_ROLE")
                        
                        @schemas.classproperty
                        def CHANGE_FOLDER_PERMISSION(cls):
                            return cls("CHANGE_FOLDER_PERMISSION")
                        
                        @schemas.classproperty
                        def COLLABORATION_ACCEPT(cls):
                            return cls("COLLABORATION_ACCEPT")
                        
                        @schemas.classproperty
                        def COLLABORATION_EXPIRATION(cls):
                            return cls("COLLABORATION_EXPIRATION")
                        
                        @schemas.classproperty
                        def COLLABORATION_INVITE(cls):
                            return cls("COLLABORATION_INVITE")
                        
                        @schemas.classproperty
                        def COLLABORATION_REMOVE(cls):
                            return cls("COLLABORATION_REMOVE")
                        
                        @schemas.classproperty
                        def COLLABORATION_ROLE_CHANGE(cls):
                            return cls("COLLABORATION_ROLE_CHANGE")
                        
                        @schemas.classproperty
                        def COLLAB_ADD_COLLABORATOR(cls):
                            return cls("COLLAB_ADD_COLLABORATOR")
                        
                        @schemas.classproperty
                        def COLLAB_INVITE_COLLABORATOR(cls):
                            return cls("COLLAB_INVITE_COLLABORATOR")
                        
                        @schemas.classproperty
                        def COLLAB_REMOVE_COLLABORATOR(cls):
                            return cls("COLLAB_REMOVE_COLLABORATOR")
                        
                        @schemas.classproperty
                        def COLLAB_ROLE_CHANGE(cls):
                            return cls("COLLAB_ROLE_CHANGE")
                        
                        @schemas.classproperty
                        def COMMENT_CREATE(cls):
                            return cls("COMMENT_CREATE")
                        
                        @schemas.classproperty
                        def COMMENT_DELETE(cls):
                            return cls("COMMENT_DELETE")
                        
                        @schemas.classproperty
                        def CONTENT_ACCESS(cls):
                            return cls("CONTENT_ACCESS")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY(cls):
                            return cls("CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_AUTOMATION_ADD(cls):
                            return cls("CONTENT_WORKFLOW_AUTOMATION_ADD")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_AUTOMATION_DELETE(cls):
                            return cls("CONTENT_WORKFLOW_AUTOMATION_DELETE")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_POLICY_ADD(cls):
                            return cls("CONTENT_WORKFLOW_POLICY_ADD")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION(cls):
                            return cls("CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION")
                        
                        @schemas.classproperty
                        def CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION(cls):
                            return cls("CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION")
                        
                        @schemas.classproperty
                        def COPY(cls):
                            return cls("COPY")
                        
                        @schemas.classproperty
                        def DATA_RETENTION_CREATE_RETENTION(cls):
                            return cls("DATA_RETENTION_CREATE_RETENTION")
                        
                        @schemas.classproperty
                        def DATA_RETENTION_REMOVE_RETENTION(cls):
                            return cls("DATA_RETENTION_REMOVE_RETENTION")
                        
                        @schemas.classproperty
                        def DELETE(cls):
                            return cls("DELETE")
                        
                        @schemas.classproperty
                        def DELETE_USER(cls):
                            return cls("DELETE_USER")
                        
                        @schemas.classproperty
                        def DEVICE_TRUST_CHECK_FAILED(cls):
                            return cls("DEVICE_TRUST_CHECK_FAILED")
                        
                        @schemas.classproperty
                        def DOWNLOAD(cls):
                            return cls("DOWNLOAD")
                        
                        @schemas.classproperty
                        def EDIT(cls):
                            return cls("EDIT")
                        
                        @schemas.classproperty
                        def EDIT_USER(cls):
                            return cls("EDIT_USER")
                        
                        @schemas.classproperty
                        def EMAIL_ALIAS_CONFIRM(cls):
                            return cls("EMAIL_ALIAS_CONFIRM")
                        
                        @schemas.classproperty
                        def EMAIL_ALIAS_REMOVE(cls):
                            return cls("EMAIL_ALIAS_REMOVE")
                        
                        @schemas.classproperty
                        def ENABLE_TWO_FACTOR_AUTH(cls):
                            return cls("ENABLE_TWO_FACTOR_AUTH")
                        
                        @schemas.classproperty
                        def ENTERPRISE_APP_AUTHORIZATION_UPDATE(cls):
                            return cls("ENTERPRISE_APP_AUTHORIZATION_UPDATE")
                        
                        @schemas.classproperty
                        def FAILED_LOGIN(cls):
                            return cls("FAILED_LOGIN")
                        
                        @schemas.classproperty
                        def FILE_MARKED_MALICIOUS(cls):
                            return cls("FILE_MARKED_MALICIOUS")
                        
                        @schemas.classproperty
                        def FILE_WATERMARKED_DOWNLOAD(cls):
                            return cls("FILE_WATERMARKED_DOWNLOAD")
                        
                        @schemas.classproperty
                        def GROUP_ADD_ITEM(cls):
                            return cls("GROUP_ADD_ITEM")
                        
                        @schemas.classproperty
                        def GROUP_ADD_USER(cls):
                            return cls("GROUP_ADD_USER")
                        
                        @schemas.classproperty
                        def GROUP_CREATION(cls):
                            return cls("GROUP_CREATION")
                        
                        @schemas.classproperty
                        def GROUP_DELETION(cls):
                            return cls("GROUP_DELETION")
                        
                        @schemas.classproperty
                        def GROUP_EDITED(cls):
                            return cls("GROUP_EDITED")
                        
                        @schemas.classproperty
                        def GROUP_REMOVE_ITEM(cls):
                            return cls("GROUP_REMOVE_ITEM")
                        
                        @schemas.classproperty
                        def GROUP_REMOVE_USER(cls):
                            return cls("GROUP_REMOVE_USER")
                        
                        @schemas.classproperty
                        def ITEM_COPY(cls):
                            return cls("ITEM_COPY")
                        
                        @schemas.classproperty
                        def ITEM_CREATE(cls):
                            return cls("ITEM_CREATE")
                        
                        @schemas.classproperty
                        def ITEM_DOWNLOAD(cls):
                            return cls("ITEM_DOWNLOAD")
                        
                        @schemas.classproperty
                        def ITEM_MAKE_CURRENT_VERSION(cls):
                            return cls("ITEM_MAKE_CURRENT_VERSION")
                        
                        @schemas.classproperty
                        def ITEM_MODIFY(cls):
                            return cls("ITEM_MODIFY")
                        
                        @schemas.classproperty
                        def ITEM_MOVE(cls):
                            return cls("ITEM_MOVE")
                        
                        @schemas.classproperty
                        def ITEM_OPEN(cls):
                            return cls("ITEM_OPEN")
                        
                        @schemas.classproperty
                        def ITEM_PREVIEW(cls):
                            return cls("ITEM_PREVIEW")
                        
                        @schemas.classproperty
                        def ITEM_RENAME(cls):
                            return cls("ITEM_RENAME")
                        
                        @schemas.classproperty
                        def ITEM_SHARED(cls):
                            return cls("ITEM_SHARED")
                        
                        @schemas.classproperty
                        def ITEM_SHARED_CREATE(cls):
                            return cls("ITEM_SHARED_CREATE")
                        
                        @schemas.classproperty
                        def ITEM_SHARED_UNSHARE(cls):
                            return cls("ITEM_SHARED_UNSHARE")
                        
                        @schemas.classproperty
                        def ITEM_SHARED_UPDATE(cls):
                            return cls("ITEM_SHARED_UPDATE")
                        
                        @schemas.classproperty
                        def ITEM_SYNC(cls):
                            return cls("ITEM_SYNC")
                        
                        @schemas.classproperty
                        def ITEM_TRASH(cls):
                            return cls("ITEM_TRASH")
                        
                        @schemas.classproperty
                        def ITEM_UNDELETE_VIA_TRASH(cls):
                            return cls("ITEM_UNDELETE_VIA_TRASH")
                        
                        @schemas.classproperty
                        def ITEM_UNSYNC(cls):
                            return cls("ITEM_UNSYNC")
                        
                        @schemas.classproperty
                        def ITEM_UPLOAD(cls):
                            return cls("ITEM_UPLOAD")
                        
                        @schemas.classproperty
                        def LEGAL_HOLD_ASSIGNMENT_CREATE(cls):
                            return cls("LEGAL_HOLD_ASSIGNMENT_CREATE")
                        
                        @schemas.classproperty
                        def LEGAL_HOLD_ASSIGNMENT_DELETE(cls):
                            return cls("LEGAL_HOLD_ASSIGNMENT_DELETE")
                        
                        @schemas.classproperty
                        def LEGAL_HOLD_POLICY_CREATE(cls):
                            return cls("LEGAL_HOLD_POLICY_CREATE")
                        
                        @schemas.classproperty
                        def LEGAL_HOLD_POLICY_DELETE(cls):
                            return cls("LEGAL_HOLD_POLICY_DELETE")
                        
                        @schemas.classproperty
                        def LEGAL_HOLD_POLICY_UPDATE(cls):
                            return cls("LEGAL_HOLD_POLICY_UPDATE")
                        
                        @schemas.classproperty
                        def LOCK(cls):
                            return cls("LOCK")
                        
                        @schemas.classproperty
                        def LOCK_CREATE(cls):
                            return cls("LOCK_CREATE")
                        
                        @schemas.classproperty
                        def LOCK_DESTROY(cls):
                            return cls("LOCK_DESTROY")
                        
                        @schemas.classproperty
                        def LOGIN(cls):
                            return cls("LOGIN")
                        
                        @schemas.classproperty
                        def MASTER_INVITE_ACCEPT(cls):
                            return cls("MASTER_INVITE_ACCEPT")
                        
                        @schemas.classproperty
                        def MASTER_INVITE_REJECT(cls):
                            return cls("MASTER_INVITE_REJECT")
                        
                        @schemas.classproperty
                        def METADATA_INSTANCE_CREATE(cls):
                            return cls("METADATA_INSTANCE_CREATE")
                        
                        @schemas.classproperty
                        def METADATA_INSTANCE_DELETE(cls):
                            return cls("METADATA_INSTANCE_DELETE")
                        
                        @schemas.classproperty
                        def METADATA_INSTANCE_UPDATE(cls):
                            return cls("METADATA_INSTANCE_UPDATE")
                        
                        @schemas.classproperty
                        def METADATA_TEMPLATE_CREATE(cls):
                            return cls("METADATA_TEMPLATE_CREATE")
                        
                        @schemas.classproperty
                        def METADATA_TEMPLATE_DELETE(cls):
                            return cls("METADATA_TEMPLATE_DELETE")
                        
                        @schemas.classproperty
                        def METADATA_TEMPLATE_UPDATE(cls):
                            return cls("METADATA_TEMPLATE_UPDATE")
                        
                        @schemas.classproperty
                        def MOVE(cls):
                            return cls("MOVE")
                        
                        @schemas.classproperty
                        def NEW_USER(cls):
                            return cls("NEW_USER")
                        
                        @schemas.classproperty
                        def PREVIEW(cls):
                            return cls("PREVIEW")
                        
                        @schemas.classproperty
                        def REMOVE_DEVICE_ASSOCIATION(cls):
                            return cls("REMOVE_DEVICE_ASSOCIATION")
                        
                        @schemas.classproperty
                        def REMOVE_LOGIN_ACTIVITY_DEVICE(cls):
                            return cls("REMOVE_LOGIN_ACTIVITY_DEVICE")
                        
                        @schemas.classproperty
                        def RENAME(cls):
                            return cls("RENAME")
                        
                        @schemas.classproperty
                        def RETENTION_POLICY_ASSIGNMENT_ADD(cls):
                            return cls("RETENTION_POLICY_ASSIGNMENT_ADD")
                        
                        @schemas.classproperty
                        def SHARE(cls):
                            return cls("SHARE")
                        
                        @schemas.classproperty
                        def SHARE_EXPIRATION(cls):
                            return cls("SHARE_EXPIRATION")
                        
                        @schemas.classproperty
                        def SHIELD_ALERT(cls):
                            return cls("SHIELD_ALERT")
                        
                        @schemas.classproperty
                        def SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED(cls):
                            return cls("SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED")
                        
                        @schemas.classproperty
                        def SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED_MISSING_JUSTIFICATION(cls):
                            return cls("SHIELD_EXTERNAL_COLLAB_ACCESS_BLOCKED_MISSING_JUSTIFICATION")
                        
                        @schemas.classproperty
                        def SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED(cls):
                            return cls("SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED")
                        
                        @schemas.classproperty
                        def SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED_MISSING_JUSTIFICATION(cls):
                            return cls("SHIELD_EXTERNAL_COLLAB_INVITE_BLOCKED_MISSING_JUSTIFICATION")
                        
                        @schemas.classproperty
                        def SHIELD_JUSTIFICATION_APPROVAL(cls):
                            return cls("SHIELD_JUSTIFICATION_APPROVAL")
                        
                        @schemas.classproperty
                        def SHIELD_SHARED_LINK_ACCESS_BLOCKED(cls):
                            return cls("SHIELD_SHARED_LINK_ACCESS_BLOCKED")
                        
                        @schemas.classproperty
                        def SHIELD_SHARED_LINK_STATUS_RESTRICTED_ON_CREATE(cls):
                            return cls("SHIELD_SHARED_LINK_STATUS_RESTRICTED_ON_CREATE")
                        
                        @schemas.classproperty
                        def SHIELD_SHARED_LINK_STATUS_RESTRICTED_ON_UPDATE(cls):
                            return cls("SHIELD_SHARED_LINK_STATUS_RESTRICTED_ON_UPDATE")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_ASSIGNED(cls):
                            return cls("SIGN_DOCUMENT_ASSIGNED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_CANCELLED(cls):
                            return cls("SIGN_DOCUMENT_CANCELLED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_COMPLETED(cls):
                            return cls("SIGN_DOCUMENT_COMPLETED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_CONVERTED(cls):
                            return cls("SIGN_DOCUMENT_CONVERTED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_CREATED(cls):
                            return cls("SIGN_DOCUMENT_CREATED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_DECLINED(cls):
                            return cls("SIGN_DOCUMENT_DECLINED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_EXPIRED(cls):
                            return cls("SIGN_DOCUMENT_EXPIRED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_SIGNED(cls):
                            return cls("SIGN_DOCUMENT_SIGNED")
                        
                        @schemas.classproperty
                        def SIGN_DOCUMENT_VIEWED_BY_SIGNED(cls):
                            return cls("SIGN_DOCUMENT_VIEWED_BY_SIGNED")
                        
                        @schemas.classproperty
                        def SIGNER_DOWNLOADED(cls):
                            return cls("SIGNER_DOWNLOADED")
                        
                        @schemas.classproperty
                        def SIGNER_FORWARDED(cls):
                            return cls("SIGNER_FORWARDED")
                        
                        @schemas.classproperty
                        def STORAGE_EXPIRATION(cls):
                            return cls("STORAGE_EXPIRATION")
                        
                        @schemas.classproperty
                        def TAG_ITEM_CREATE(cls):
                            return cls("TAG_ITEM_CREATE")
                        
                        @schemas.classproperty
                        def TASK_ASSIGNMENT_CREATE(cls):
                            return cls("TASK_ASSIGNMENT_CREATE")
                        
                        @schemas.classproperty
                        def TASK_ASSIGNMENT_DELETE(cls):
                            return cls("TASK_ASSIGNMENT_DELETE")
                        
                        @schemas.classproperty
                        def TASK_ASSIGNMENT_UPDATE(cls):
                            return cls("TASK_ASSIGNMENT_UPDATE")
                        
                        @schemas.classproperty
                        def TASK_CREATE(cls):
                            return cls("TASK_CREATE")
                        
                        @schemas.classproperty
                        def TASK_UPDATE(cls):
                            return cls("TASK_UPDATE")
                        
                        @schemas.classproperty
                        def TERMS_OF_SERVICE_ACCEPT(cls):
                            return cls("TERMS_OF_SERVICE_ACCEPT")
                        
                        @schemas.classproperty
                        def TERMS_OF_SERVICE_REJECT(cls):
                            return cls("TERMS_OF_SERVICE_REJECT")
                        
                        @schemas.classproperty
                        def UNDELETE(cls):
                            return cls("UNDELETE")
                        
                        @schemas.classproperty
                        def UNLOCK(cls):
                            return cls("UNLOCK")
                        
                        @schemas.classproperty
                        def UNSHARE(cls):
                            return cls("UNSHARE")
                        
                        @schemas.classproperty
                        def UPDATE_COLLABORATION_EXPIRATION(cls):
                            return cls("UPDATE_COLLABORATION_EXPIRATION")
                        
                        @schemas.classproperty
                        def UPDATE_SHARE_EXPIRATION(cls):
                            return cls("UPDATE_SHARE_EXPIRATION")
                        
                        @schemas.classproperty
                        def UPLOAD(cls):
                            return cls("UPLOAD")
                        
                        @schemas.classproperty
                        def USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE(cls):
                            return cls("USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE")
                        
                        @schemas.classproperty
                        def WATERMARK_LABEL_CREATE(cls):
                            return cls("WATERMARK_LABEL_CREATE")
                        
                        @schemas.classproperty
                        def WATERMARK_LABEL_DELETE(cls):
                            return cls("WATERMARK_LABEL_DELETE")
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'event_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            session_id = schemas.StrSchema
            
            
            class source(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def one_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    User,
                                    EventSource,
                                    File,
                                    Folder,
                                    GenericSource,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'all_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'source':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            additional_details = schemas.DictSchema
            __annotations__ = {
                "type": type,
                "created_at": created_at,
                "recorded_at": recorded_at,
                "event_id": event_id,
                "created_by": created_by,
                "event_type": event_type,
                "session_id": session_id,
                "source": source,
                "additional_details": additional_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recorded_at"]) -> MetaOapg.properties.recorded_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_id"]) -> MetaOapg.properties.session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_details"]) -> MetaOapg.properties.additional_details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "created_at", "recorded_at", "event_id", "created_by", "event_type", "session_id", "source", "additional_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recorded_at"]) -> typing.Union[MetaOapg.properties.recorded_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> typing.Union[MetaOapg.properties.event_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> typing.Union[MetaOapg.properties.event_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_id"]) -> typing.Union[MetaOapg.properties.session_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_details"]) -> typing.Union[MetaOapg.properties.additional_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "created_at", "recorded_at", "event_id", "created_by", "event_type", "session_id", "source", "additional_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        recorded_at: typing.Union[MetaOapg.properties.recorded_at, str, datetime, schemas.Unset] = schemas.unset,
        event_id: typing.Union[MetaOapg.properties.event_id, str, schemas.Unset] = schemas.unset,
        created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        event_type: typing.Union[MetaOapg.properties.event_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        session_id: typing.Union[MetaOapg.properties.session_id, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        additional_details: typing.Union[MetaOapg.properties.additional_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            type=type,
            created_at=created_at,
            recorded_at=recorded_at,
            event_id=event_id,
            created_by=created_by,
            event_type=event_type,
            session_id=session_id,
            source=source,
            additional_details=additional_details,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.event_source import EventSource
from box_python_sdk.model.file import File
from box_python_sdk.model.folder import Folder
from box_python_sdk.model.generic_source import GenericSource
from box_python_sdk.model.user import User
from box_python_sdk.model.user_mini import UserMini
