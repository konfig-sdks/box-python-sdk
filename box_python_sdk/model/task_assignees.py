# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class TaskAssignees(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Task assignees.
    """


    class MetaOapg:
        required = {
            "entries",
        }
        
        class properties:
        
            @staticmethod
            def entries() -> typing.Type['TaskAssigneesEntries']:
                return TaskAssigneesEntries
            
            
            class next_marker(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_marker':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            limit = schemas.IntSchema
            __annotations__ = {
                "entries": entries,
                "next_marker": next_marker,
                "limit": limit,
            }
    
    entries: 'TaskAssigneesEntries'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entries"]) -> 'TaskAssigneesEntries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_marker"]) -> MetaOapg.properties.next_marker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entries", "next_marker", "limit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> 'TaskAssigneesEntries': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_marker"]) -> typing.Union[MetaOapg.properties.next_marker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entries", "next_marker", "limit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entries: 'TaskAssigneesEntries',
        next_marker: typing.Union[MetaOapg.properties.next_marker, None, str, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskAssignees':
        return super().__new__(
            cls,
            *args,
            entries=entries,
            next_marker=next_marker,
            limit=limit,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.task_assignees_entries import TaskAssigneesEntries
