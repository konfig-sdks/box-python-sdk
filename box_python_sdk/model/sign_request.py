# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class SignRequest(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A Sign Request Object
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "sign-request": "SIGNREQUEST",
                            }
                        
                        @schemas.classproperty
                        def SIGNREQUEST(cls):
                            return cls("sign-request")
                    
                    
                    class source_files(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['FileBase']:
                                return FileBase
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['FileBase'], typing.List['FileBase']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'source_files':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'FileBase':
                            return super().__getitem__(i)
                    
                    
                    class signers(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['SignRequestSigner']:
                                return SignRequestSigner
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['SignRequestSigner'], typing.List['SignRequestSigner']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'signers':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'SignRequestSigner':
                            return super().__getitem__(i)
                    
                    
                    class signature_color(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'signature_color':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    id = schemas.StrSchema
                    
                    
                    class prepare_url(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'prepare_url':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class signing_log(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FileMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'signing_log':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "converting": "CONVERTING",
                                "created": "CREATED",
                                "sent": "SENT",
                                "viewed": "VIEWED",
                                "signed": "SIGNED",
                                "cancelled": "CANCELLED",
                                "declined": "DECLINED",
                                "error_converting": "ERROR_CONVERTING",
                                "error_sending": "ERROR_SENDING",
                                "expired": "EXPIRED",
                                "finalizing": "FINALIZING",
                                "error_finalizing": "ERROR_FINALIZING",
                            }
                        
                        @schemas.classproperty
                        def CONVERTING(cls):
                            return cls("converting")
                        
                        @schemas.classproperty
                        def CREATED(cls):
                            return cls("created")
                        
                        @schemas.classproperty
                        def SENT(cls):
                            return cls("sent")
                        
                        @schemas.classproperty
                        def VIEWED(cls):
                            return cls("viewed")
                        
                        @schemas.classproperty
                        def SIGNED(cls):
                            return cls("signed")
                        
                        @schemas.classproperty
                        def CANCELLED(cls):
                            return cls("cancelled")
                        
                        @schemas.classproperty
                        def DECLINED(cls):
                            return cls("declined")
                        
                        @schemas.classproperty
                        def ERROR_CONVERTING(cls):
                            return cls("error_converting")
                        
                        @schemas.classproperty
                        def ERROR_SENDING(cls):
                            return cls("error_sending")
                        
                        @schemas.classproperty
                        def EXPIRED(cls):
                            return cls("expired")
                        
                        @schemas.classproperty
                        def FINALIZING(cls):
                            return cls("finalizing")
                        
                        @schemas.classproperty
                        def ERROR_FINALIZING(cls):
                            return cls("error_finalizing")
                    
                    
                    class sign_files(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class files(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        @staticmethod
                                        def items() -> typing.Type['FileMini']:
                                            return FileMini
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple['FileMini'], typing.List['FileMini']],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'files':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> 'FileMini':
                                        return super().__getitem__(i)
                                is_ready_for_download = schemas.BoolSchema
                                __annotations__ = {
                                    "files": files,
                                    "is_ready_for_download": is_ready_for_download,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_ready_for_download"]) -> MetaOapg.properties.is_ready_for_download: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["files", "is_ready_for_download", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> typing.Union[MetaOapg.properties.files, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_ready_for_download"]) -> typing.Union[MetaOapg.properties.is_ready_for_download, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["files", "is_ready_for_download", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            files: typing.Union[MetaOapg.properties.files, list, tuple, schemas.Unset] = schemas.unset,
                            is_ready_for_download: typing.Union[MetaOapg.properties.is_ready_for_download, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'sign_files':
                            return super().__new__(
                                cls,
                                *args,
                                files=files,
                                is_ready_for_download=is_ready_for_download,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class auto_expire_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'auto_expire_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class parent_folder(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FolderMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'parent_folder':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "type": type,
                        "source_files": source_files,
                        "signers": signers,
                        "signature_color": signature_color,
                        "id": id,
                        "prepare_url": prepare_url,
                        "signing_log": signing_log,
                        "status": status,
                        "sign_files": sign_files,
                        "auto_expire_at": auto_expire_at,
                        "parent_folder": parent_folder,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["source_files"]) -> MetaOapg.properties.source_files: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signers"]) -> MetaOapg.properties.signers: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signature_color"]) -> MetaOapg.properties.signature_color: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["prepare_url"]) -> MetaOapg.properties.prepare_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signing_log"]) -> MetaOapg.properties.signing_log: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sign_files"]) -> MetaOapg.properties.sign_files: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["auto_expire_at"]) -> MetaOapg.properties.auto_expire_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["parent_folder"]) -> MetaOapg.properties.parent_folder: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "source_files", "signers", "signature_color", "id", "prepare_url", "signing_log", "status", "sign_files", "auto_expire_at", "parent_folder", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["source_files"]) -> typing.Union[MetaOapg.properties.source_files, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signers"]) -> typing.Union[MetaOapg.properties.signers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signature_color"]) -> typing.Union[MetaOapg.properties.signature_color, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["prepare_url"]) -> typing.Union[MetaOapg.properties.prepare_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signing_log"]) -> typing.Union[MetaOapg.properties.signing_log, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sign_files"]) -> typing.Union[MetaOapg.properties.sign_files, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["auto_expire_at"]) -> typing.Union[MetaOapg.properties.auto_expire_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["parent_folder"]) -> typing.Union[MetaOapg.properties.parent_folder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "source_files", "signers", "signature_color", "id", "prepare_url", "signing_log", "status", "sign_files", "auto_expire_at", "parent_folder", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                source_files: typing.Union[MetaOapg.properties.source_files, list, tuple, schemas.Unset] = schemas.unset,
                signers: typing.Union[MetaOapg.properties.signers, list, tuple, schemas.Unset] = schemas.unset,
                signature_color: typing.Union[MetaOapg.properties.signature_color, None, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                prepare_url: typing.Union[MetaOapg.properties.prepare_url, None, str, schemas.Unset] = schemas.unset,
                signing_log: typing.Union[MetaOapg.properties.signing_log, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                sign_files: typing.Union[MetaOapg.properties.sign_files, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                auto_expire_at: typing.Union[MetaOapg.properties.auto_expire_at, None, str, datetime, schemas.Unset] = schemas.unset,
                parent_folder: typing.Union[MetaOapg.properties.parent_folder, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    type=type,
                    source_files=source_files,
                    signers=signers,
                    signature_color=signature_color,
                    id=id,
                    prepare_url=prepare_url,
                    signing_log=signing_log,
                    status=status,
                    sign_files=sign_files,
                    auto_expire_at=auto_expire_at,
                    parent_folder=parent_folder,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SignRequestBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignRequest':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.file_base import FileBase
from box_python_sdk.model.file_mini import FileMini
from box_python_sdk.model.folder_mini import FolderMini
from box_python_sdk.model.sign_request_base import SignRequestBase
from box_python_sdk.model.sign_request_signer import SignRequestSigner
