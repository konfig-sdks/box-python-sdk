# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class KeywordSkillCard(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A skill card that contains a set of keywords
    """


    class MetaOapg:
        required = {
            "entries",
            "invocation",
            "skill",
            "type",
            "skill_card_type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "skill_card": "SKILL_CARD",
                    }
                
                @schemas.classproperty
                def SKILL_CARD(cls):
                    return cls("skill_card")
            
            
            class skill_card_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "keyword": "KEYWORD",
                    }
                
                @schemas.classproperty
                def KEYWORD(cls):
                    return cls("keyword")
        
            @staticmethod
            def skill() -> typing.Type['KeywordSkillCardSkill']:
                return KeywordSkillCardSkill
        
            @staticmethod
            def invocation() -> typing.Type['KeywordSkillCardInvocation']:
                return KeywordSkillCardInvocation
        
            @staticmethod
            def entries() -> typing.Type['KeywordSkillCardEntries']:
                return KeywordSkillCardEntries
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def skill_card_title() -> typing.Type['KeywordSkillCardSkillCardTitle']:
                return KeywordSkillCardSkillCardTitle
            __annotations__ = {
                "type": type,
                "skill_card_type": skill_card_type,
                "skill": skill,
                "invocation": invocation,
                "entries": entries,
                "created_at": created_at,
                "skill_card_title": skill_card_title,
            }
    
    entries: 'KeywordSkillCardEntries'
    invocation: 'KeywordSkillCardInvocation'
    skill: 'KeywordSkillCardSkill'
    type: MetaOapg.properties.type
    skill_card_type: MetaOapg.properties.skill_card_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skill_card_type"]) -> MetaOapg.properties.skill_card_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skill"]) -> 'KeywordSkillCardSkill': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invocation"]) -> 'KeywordSkillCardInvocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entries"]) -> 'KeywordSkillCardEntries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skill_card_title"]) -> 'KeywordSkillCardSkillCardTitle': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "skill_card_type", "skill", "invocation", "entries", "created_at", "skill_card_title", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skill_card_type"]) -> MetaOapg.properties.skill_card_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skill"]) -> 'KeywordSkillCardSkill': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invocation"]) -> 'KeywordSkillCardInvocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> 'KeywordSkillCardEntries': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skill_card_title"]) -> typing.Union['KeywordSkillCardSkillCardTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "skill_card_type", "skill", "invocation", "entries", "created_at", "skill_card_title", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entries: 'KeywordSkillCardEntries',
        invocation: 'KeywordSkillCardInvocation',
        skill: 'KeywordSkillCardSkill',
        type: typing.Union[MetaOapg.properties.type, str, ],
        skill_card_type: typing.Union[MetaOapg.properties.skill_card_type, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        skill_card_title: typing.Union['KeywordSkillCardSkillCardTitle', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'KeywordSkillCard':
        return super().__new__(
            cls,
            *args,
            entries=entries,
            invocation=invocation,
            skill=skill,
            type=type,
            skill_card_type=skill_card_type,
            created_at=created_at,
            skill_card_title=skill_card_title,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.keyword_skill_card_entries import KeywordSkillCardEntries
from box_python_sdk.model.keyword_skill_card_invocation import KeywordSkillCardInvocation
from box_python_sdk.model.keyword_skill_card_skill import KeywordSkillCardSkill
from box_python_sdk.model.keyword_skill_card_skill_card_title import KeywordSkillCardSkillCardTitle
