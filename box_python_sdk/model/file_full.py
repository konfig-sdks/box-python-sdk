# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class FileFull(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A full representation of a file, as can be returned from any
file API endpoints by default
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class tags(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    max_items = 100
                                    min_items = 1
                                    items = schemas.StrSchema
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'tags':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    version_number = schemas.StrSchema
                    comment_count = schemas.IntSchema
                    
                    
                    class permissions(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.ComposedBase,
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "can_comment",
                                        "can_view_annotations_all",
                                        "can_upload",
                                        "can_preview",
                                        "can_view_annotations_self",
                                        "can_annotate",
                                    }
                                    
                                    
                                    class all_of_0(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "can_invite_collaborator",
                                                "can_set_share_access",
                                                "can_delete",
                                                "can_share",
                                                "can_rename",
                                                "can_download",
                                            }
                                            
                                            class properties:
                                                can_delete = schemas.BoolSchema
                                                can_download = schemas.BoolSchema
                                                can_invite_collaborator = schemas.BoolSchema
                                                can_rename = schemas.BoolSchema
                                                can_set_share_access = schemas.BoolSchema
                                                can_share = schemas.BoolSchema
                                                __annotations__ = {
                                                    "can_delete": can_delete,
                                                    "can_download": can_download,
                                                    "can_invite_collaborator": can_invite_collaborator,
                                                    "can_rename": can_rename,
                                                    "can_set_share_access": can_set_share_access,
                                                    "can_share": can_share,
                                                }
                                        
                                        can_invite_collaborator: MetaOapg.properties.can_invite_collaborator
                                        can_set_share_access: MetaOapg.properties.can_set_share_access
                                        can_delete: MetaOapg.properties.can_delete
                                        can_share: MetaOapg.properties.can_share
                                        can_rename: MetaOapg.properties.can_rename
                                        can_download: MetaOapg.properties.can_download
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_invite_collaborator"]) -> MetaOapg.properties.can_invite_collaborator: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_rename"]) -> MetaOapg.properties.can_rename: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_set_share_access"]) -> MetaOapg.properties.can_set_share_access: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_share"]) -> MetaOapg.properties.can_share: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_delete", "can_download", "can_invite_collaborator", "can_rename", "can_set_share_access", "can_share", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_invite_collaborator"]) -> MetaOapg.properties.can_invite_collaborator: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_rename"]) -> MetaOapg.properties.can_rename: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_set_share_access"]) -> MetaOapg.properties.can_set_share_access: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_share"]) -> MetaOapg.properties.can_share: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_delete", "can_download", "can_invite_collaborator", "can_rename", "can_set_share_access", "can_share", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            can_invite_collaborator: typing.Union[MetaOapg.properties.can_invite_collaborator, bool, ],
                                            can_set_share_access: typing.Union[MetaOapg.properties.can_set_share_access, bool, ],
                                            can_delete: typing.Union[MetaOapg.properties.can_delete, bool, ],
                                            can_share: typing.Union[MetaOapg.properties.can_share, bool, ],
                                            can_rename: typing.Union[MetaOapg.properties.can_rename, bool, ],
                                            can_download: typing.Union[MetaOapg.properties.can_download, bool, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_0':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                can_invite_collaborator=can_invite_collaborator,
                                                can_set_share_access=can_set_share_access,
                                                can_delete=can_delete,
                                                can_share=can_share,
                                                can_rename=can_rename,
                                                can_download=can_download,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class all_of_1(
                                        schemas.AnyTypeSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                can_annotate = schemas.BoolSchema
                                                can_comment = schemas.BoolSchema
                                                can_preview = schemas.BoolSchema
                                                can_upload = schemas.BoolSchema
                                                can_view_annotations_all = schemas.BoolSchema
                                                can_view_annotations_self = schemas.BoolSchema
                                                __annotations__ = {
                                                    "can_annotate": can_annotate,
                                                    "can_comment": can_comment,
                                                    "can_preview": can_preview,
                                                    "can_upload": can_upload,
                                                    "can_view_annotations_all": can_view_annotations_all,
                                                    "can_view_annotations_self": can_view_annotations_self,
                                                }
                                    
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_annotate"]) -> MetaOapg.properties.can_annotate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_comment"]) -> MetaOapg.properties.can_comment: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_preview"]) -> MetaOapg.properties.can_preview: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_upload"]) -> MetaOapg.properties.can_upload: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_view_annotations_all"]) -> MetaOapg.properties.can_view_annotations_all: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_view_annotations_self"]) -> MetaOapg.properties.can_view_annotations_self: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_annotate", "can_comment", "can_preview", "can_upload", "can_view_annotations_all", "can_view_annotations_self", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_annotate"]) -> typing.Union[MetaOapg.properties.can_annotate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_comment"]) -> typing.Union[MetaOapg.properties.can_comment, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_preview"]) -> typing.Union[MetaOapg.properties.can_preview, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_upload"]) -> typing.Union[MetaOapg.properties.can_upload, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_view_annotations_all"]) -> typing.Union[MetaOapg.properties.can_view_annotations_all, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_view_annotations_self"]) -> typing.Union[MetaOapg.properties.can_view_annotations_self, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_annotate", "can_comment", "can_preview", "can_upload", "can_view_annotations_all", "can_view_annotations_self", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            can_annotate: typing.Union[MetaOapg.properties.can_annotate, bool, schemas.Unset] = schemas.unset,
                                            can_comment: typing.Union[MetaOapg.properties.can_comment, bool, schemas.Unset] = schemas.unset,
                                            can_preview: typing.Union[MetaOapg.properties.can_preview, bool, schemas.Unset] = schemas.unset,
                                            can_upload: typing.Union[MetaOapg.properties.can_upload, bool, schemas.Unset] = schemas.unset,
                                            can_view_annotations_all: typing.Union[MetaOapg.properties.can_view_annotations_all, bool, schemas.Unset] = schemas.unset,
                                            can_view_annotations_self: typing.Union[MetaOapg.properties.can_view_annotations_self, bool, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_1':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                can_annotate=can_annotate,
                                                can_comment=can_comment,
                                                can_preview=can_preview,
                                                can_upload=can_upload,
                                                can_view_annotations_all=can_view_annotations_all,
                                                can_view_annotations_self=can_view_annotations_self,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    @classmethod
                                    @functools.lru_cache()
                                    def all_of(cls):
                                        # we need this here to make our import statements work
                                        # we must store _composed_schemas in here so the code is only run
                                        # when we invoke this method. If we kept this at the class
                                        # level we would get an error because the class level
                                        # code would be run when this module is imported, and these composed
                                        # classes don't exist yet because their module has not finished
                                        # loading
                                        return [
                                            cls.all_of_0,
                                            cls.all_of_1,
                                        ]
                            
                                
                                can_comment: schemas.AnyTypeSchema
                                can_view_annotations_all: schemas.AnyTypeSchema
                                can_upload: schemas.AnyTypeSchema
                                can_preview: schemas.AnyTypeSchema
                                can_view_annotations_self: schemas.AnyTypeSchema
                                can_annotate: schemas.AnyTypeSchema
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    can_comment: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    can_view_annotations_all: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    can_upload: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    can_preview: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    can_view_annotations_self: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    can_annotate: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        can_comment=can_comment,
                                        can_view_annotations_all=can_view_annotations_all,
                                        can_upload=can_upload,
                                        can_preview=can_preview,
                                        can_view_annotations_self=can_view_annotations_self,
                                        can_annotate=can_annotate,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'permissions':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class lock(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        id = schemas.StrSchema
                                        
                                        
                                        class type(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                enum_value_to_name = {
                                                    "lock": "LOCK",
                                                }
                                            
                                            @schemas.classproperty
                                            def LOCK(cls):
                                                return cls("lock")
                                        
                                        
                                        class created_by(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                all_of_1 = schemas.AnyTypeSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def all_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        UserMini,
                                                        cls.all_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'created_by':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        created_at = schemas.DateTimeSchema
                                        expired_at = schemas.DateTimeSchema
                                        is_download_prevented = schemas.BoolSchema
                                        
                                        
                                        class app_type(
                                            schemas.EnumBase,
                                            schemas.StrBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneStrMixin
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                enum_value_to_name = {
                                                    "gsuite": "GSUITE",
                                                    "office_wopi": "OFFICE_WOPI",
                                                    "office_wopiplus": "OFFICE_WOPIPLUS",
                                                    "other": "OTHER",
                                                }
                                            
                                            @schemas.classproperty
                                            def GSUITE(cls):
                                                return cls("gsuite")
                                            
                                            @schemas.classproperty
                                            def OFFICE_WOPI(cls):
                                                return cls("office_wopi")
                                            
                                            @schemas.classproperty
                                            def OFFICE_WOPIPLUS(cls):
                                                return cls("office_wopiplus")
                                            
                                            @schemas.classproperty
                                            def OTHER(cls):
                                                return cls("other")
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[None, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'app_type':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                )
                                        __annotations__ = {
                                            "id": id,
                                            "type": type,
                                            "created_by": created_by,
                                            "created_at": created_at,
                                            "expired_at": expired_at,
                                            "is_download_prevented": is_download_prevented,
                                            "app_type": app_type,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["expired_at"]) -> MetaOapg.properties.expired_at: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_download_prevented"]) -> MetaOapg.properties.is_download_prevented: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["app_type"]) -> MetaOapg.properties.app_type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "created_by", "created_at", "expired_at", "is_download_prevented", "app_type", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["expired_at"]) -> typing.Union[MetaOapg.properties.expired_at, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_download_prevented"]) -> typing.Union[MetaOapg.properties.is_download_prevented, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["app_type"]) -> typing.Union[MetaOapg.properties.app_type, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "created_by", "created_at", "expired_at", "is_download_prevented", "app_type", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                    created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                                    expired_at: typing.Union[MetaOapg.properties.expired_at, str, datetime, schemas.Unset] = schemas.unset,
                                    is_download_prevented: typing.Union[MetaOapg.properties.is_download_prevented, bool, schemas.Unset] = schemas.unset,
                                    app_type: typing.Union[MetaOapg.properties.app_type, None, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        type=type,
                                        created_by=created_by,
                                        created_at=created_at,
                                        expired_at=expired_at,
                                        is_download_prevented=is_download_prevented,
                                        app_type=app_type,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'lock':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    extension = schemas.StrSchema
                    is_package = schemas.BoolSchema
                    
                    
                    class expiring_embed_link(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.ComposedBase,
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class all_of_0(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                access_token = schemas.StrSchema
                                                expires_in = schemas.Int64Schema
                                                
                                                
                                                class token_type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        enum_value_to_name = {
                                                            "bearer": "BEARER",
                                                        }
                                                    
                                                    @schemas.classproperty
                                                    def BEARER(cls):
                                                        return cls("bearer")
                                                
                                                
                                                class restricted_to(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        @staticmethod
                                                        def items() -> typing.Type['FileOrFolderScope']:
                                                            return FileOrFolderScope
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple['FileOrFolderScope'], typing.List['FileOrFolderScope']],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'restricted_to':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> 'FileOrFolderScope':
                                                        return super().__getitem__(i)
                                                __annotations__ = {
                                                    "access_token": access_token,
                                                    "expires_in": expires_in,
                                                    "token_type": token_type,
                                                    "restricted_to": restricted_to,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["expires_in"]) -> MetaOapg.properties.expires_in: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["token_type"]) -> MetaOapg.properties.token_type: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["restricted_to"]) -> MetaOapg.properties.restricted_to: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "expires_in", "token_type", "restricted_to", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> typing.Union[MetaOapg.properties.access_token, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["expires_in"]) -> typing.Union[MetaOapg.properties.expires_in, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["token_type"]) -> typing.Union[MetaOapg.properties.token_type, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["restricted_to"]) -> typing.Union[MetaOapg.properties.restricted_to, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "expires_in", "token_type", "restricted_to", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            access_token: typing.Union[MetaOapg.properties.access_token, str, schemas.Unset] = schemas.unset,
                                            expires_in: typing.Union[MetaOapg.properties.expires_in, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            token_type: typing.Union[MetaOapg.properties.token_type, str, schemas.Unset] = schemas.unset,
                                            restricted_to: typing.Union[MetaOapg.properties.restricted_to, list, tuple, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_0':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                access_token=access_token,
                                                expires_in=expires_in,
                                                token_type=token_type,
                                                restricted_to=restricted_to,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class all_of_1(
                                        schemas.AnyTypeSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                url = schemas.StrSchema
                                                __annotations__ = {
                                                    "url": url,
                                                }
                                    
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_1':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                url=url,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    @classmethod
                                    @functools.lru_cache()
                                    def all_of(cls):
                                        # we need this here to make our import statements work
                                        # we must store _composed_schemas in here so the code is only run
                                        # when we invoke this method. If we kept this at the class
                                        # level we would get an error because the class level
                                        # code would be run when this module is imported, and these composed
                                        # classes don't exist yet because their module has not finished
                                        # loading
                                        return [
                                            cls.all_of_0,
                                            cls.all_of_1,
                                        ]
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'expiring_embed_link':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class watermark_info(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        is_watermarked = schemas.BoolSchema
                                        __annotations__ = {
                                            "is_watermarked": is_watermarked,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_watermarked"]) -> MetaOapg.properties.is_watermarked: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_watermarked", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_watermarked"]) -> typing.Union[MetaOapg.properties.is_watermarked, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_watermarked", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    is_watermarked: typing.Union[MetaOapg.properties.is_watermarked, bool, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        is_watermarked=is_watermarked,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'watermark_info':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class is_accessible_via_shared_link(
                        schemas.EnumBase,
                        schemas.BoolSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                True: "TRUE",
                                False: "FALSE",
                            }
                        
                        @schemas.classproperty
                        def TRUE(cls):
                            return cls(True)
                        
                        @schemas.classproperty
                        def FALSE(cls):
                            return cls(False)
                    
                    
                    class allowed_invitee_roles(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                            
                            
                                class MetaOapg:
                                    enum_value_to_name = {
                                        "editor": "EDITOR",
                                        "viewer": "VIEWER",
                                        "previewer": "PREVIEWER",
                                        "uploader": "UPLOADER",
                                        "previewer uploader": "PREVIEWER_UPLOADER",
                                        "viewer uploader": "VIEWER_UPLOADER",
                                        "co-owner": "COOWNER",
                                    }
                                
                                @schemas.classproperty
                                def EDITOR(cls):
                                    return cls("editor")
                                
                                @schemas.classproperty
                                def VIEWER(cls):
                                    return cls("viewer")
                                
                                @schemas.classproperty
                                def PREVIEWER(cls):
                                    return cls("previewer")
                                
                                @schemas.classproperty
                                def UPLOADER(cls):
                                    return cls("uploader")
                                
                                @schemas.classproperty
                                def PREVIEWER_UPLOADER(cls):
                                    return cls("previewer uploader")
                                
                                @schemas.classproperty
                                def VIEWER_UPLOADER(cls):
                                    return cls("viewer uploader")
                                
                                @schemas.classproperty
                                def COOWNER(cls):
                                    return cls("co-owner")
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'allowed_invitee_roles':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    is_externally_owned = schemas.BoolSchema
                    has_collaborations = schemas.BoolSchema
                    
                    
                    class metadata(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class additional_properties(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def additional_properties() -> typing.Type['MetadataBase']:
                                                return MetadataBase
                                        
                                        def __getitem__(self, name: typing.Union[str, ]) -> 'MetadataBase':
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        def get_item_oapg(self, name: typing.Union[str, ]) -> 'MetadataBase':
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: 'MetadataBase',
                                        ) -> 'additional_properties':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                
                                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    return super().get_item_oapg(name)
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'metadata':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class expires_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'expires_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class representations(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        
                                        
                                        class entries(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class items(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            
                                                            
                                                            class info(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        url = schemas.StrSchema
                                                                        __annotations__ = {
                                                                            "url": url,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                    url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'info':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *args,
                                                                        url=url,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            
                                                            
                                                            class content(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        url_template = schemas.StrSchema
                                                                        __annotations__ = {
                                                                            "url_template": url_template,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["url_template"]) -> MetaOapg.properties.url_template: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["url_template", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["url_template"]) -> typing.Union[MetaOapg.properties.url_template, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url_template", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                    url_template: typing.Union[MetaOapg.properties.url_template, str, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'content':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *args,
                                                                        url_template=url_template,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            
                                                            
                                                            class properties(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        dimensions = schemas.StrSchema
                                                                        paged = schemas.BoolSchema
                                                                        thumb = schemas.BoolSchema
                                                                        __annotations__ = {
                                                                            "dimensions": dimensions,
                                                                            "paged": paged,
                                                                            "thumb": thumb,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["dimensions"]) -> MetaOapg.properties.dimensions: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["paged"]) -> MetaOapg.properties.paged: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["thumb"]) -> MetaOapg.properties.thumb: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["dimensions", "paged", "thumb", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["dimensions"]) -> typing.Union[MetaOapg.properties.dimensions, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["paged"]) -> typing.Union[MetaOapg.properties.paged, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["thumb"]) -> typing.Union[MetaOapg.properties.thumb, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dimensions", "paged", "thumb", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                    dimensions: typing.Union[MetaOapg.properties.dimensions, str, schemas.Unset] = schemas.unset,
                                                                    paged: typing.Union[MetaOapg.properties.paged, bool, schemas.Unset] = schemas.unset,
                                                                    thumb: typing.Union[MetaOapg.properties.thumb, bool, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'properties':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *args,
                                                                        dimensions=dimensions,
                                                                        paged=paged,
                                                                        thumb=thumb,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            representation = schemas.StrSchema
                                                            
                                                            
                                                            class status(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        
                                                                        
                                                                        class state(
                                                                            schemas.EnumBase,
                                                                            schemas.StrSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                enum_value_to_name = {
                                                                                    "success": "SUCCESS",
                                                                                    "viewable": "VIEWABLE",
                                                                                    "pending": "PENDING",
                                                                                    "none": "NONE",
                                                                                }
                                                                            
                                                                            @schemas.classproperty
                                                                            def SUCCESS(cls):
                                                                                return cls("success")
                                                                            
                                                                            @schemas.classproperty
                                                                            def VIEWABLE(cls):
                                                                                return cls("viewable")
                                                                            
                                                                            @schemas.classproperty
                                                                            def PENDING(cls):
                                                                                return cls("pending")
                                                                            
                                                                            @schemas.classproperty
                                                                            def NONE(cls):
                                                                                return cls("none")
                                                                        __annotations__ = {
                                                                            "state": state,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["state", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["state", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                    state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'status':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *args,
                                                                        state=state,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "info": info,
                                                                "content": content,
                                                                "properties": properties,
                                                                "representation": representation,
                                                                "status": status,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["representation"]) -> MetaOapg.properties.representation: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["info", "content", "properties", "representation", "status", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> typing.Union[MetaOapg.properties.info, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["representation"]) -> typing.Union[MetaOapg.properties.representation, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["info", "content", "properties", "representation", "status", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                        info: typing.Union[MetaOapg.properties.info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        content: typing.Union[MetaOapg.properties.content, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        properties: typing.Union[MetaOapg.properties.properties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        representation: typing.Union[MetaOapg.properties.representation, str, schemas.Unset] = schemas.unset,
                                                        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'items':
                                                        return super().__new__(
                                                            cls,
                                                            *args,
                                                            info=info,
                                                            content=content,
                                                            properties=properties,
                                                            representation=representation,
                                                            status=status,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'entries':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "entries": entries,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["entries", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> typing.Union[MetaOapg.properties.entries, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entries", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    entries: typing.Union[MetaOapg.properties.entries, list, tuple, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        entries=entries,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'representations':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class classification(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        name = schemas.StrSchema
                                        definition = schemas.StrSchema
                                        color = schemas.StrSchema
                                        __annotations__ = {
                                            "name": name,
                                            "definition": definition,
                                            "color": color,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "definition", "color", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "definition", "color", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                    definition: typing.Union[MetaOapg.properties.definition, str, schemas.Unset] = schemas.unset,
                                    color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        name=name,
                                        definition=definition,
                                        color=color,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'classification':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class uploader_display_name(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'uploader_display_name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class disposition_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'disposition_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class shared_link_permission_options(
                        schemas.EnumBase,
                        schemas.ListBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneTupleMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "can_preview": "PREVIEW",
                                "can_download": "DOWNLOAD",
                                "can_edit": "EDIT",
                            }
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                            
                            
                                class MetaOapg:
                                    enum_value_to_name = {
                                        "can_preview": "PREVIEW",
                                        "can_download": "DOWNLOAD",
                                        "can_edit": "EDIT",
                                    }
                                
                                @schemas.classproperty
                                def PREVIEW(cls):
                                    return cls("can_preview")
                                
                                @schemas.classproperty
                                def DOWNLOAD(cls):
                                    return cls("can_download")
                                
                                @schemas.classproperty
                                def EDIT(cls):
                                    return cls("can_edit")
                        
                        @schemas.classproperty
                        def PREVIEW(cls):
                            return cls("can_preview")
                        
                        @schemas.classproperty
                        def DOWNLOAD(cls):
                            return cls("can_download")
                        
                        @schemas.classproperty
                        def EDIT(cls):
                            return cls("can_edit")
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[list, tuple, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'shared_link_permission_options':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "tags": tags,
                        "version_number": version_number,
                        "comment_count": comment_count,
                        "permissions": permissions,
                        "lock": lock,
                        "extension": extension,
                        "is_package": is_package,
                        "expiring_embed_link": expiring_embed_link,
                        "watermark_info": watermark_info,
                        "is_accessible_via_shared_link": is_accessible_via_shared_link,
                        "allowed_invitee_roles": allowed_invitee_roles,
                        "is_externally_owned": is_externally_owned,
                        "has_collaborations": has_collaborations,
                        "metadata": metadata,
                        "expires_at": expires_at,
                        "representations": representations,
                        "classification": classification,
                        "uploader_display_name": uploader_display_name,
                        "disposition_at": disposition_at,
                        "shared_link_permission_options": shared_link_permission_options,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["version_number"]) -> MetaOapg.properties.version_number: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["lock"]) -> MetaOapg.properties.lock: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["extension"]) -> MetaOapg.properties.extension: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_package"]) -> MetaOapg.properties.is_package: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expiring_embed_link"]) -> MetaOapg.properties.expiring_embed_link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["watermark_info"]) -> MetaOapg.properties.watermark_info: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_accessible_via_shared_link"]) -> MetaOapg.properties.is_accessible_via_shared_link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["allowed_invitee_roles"]) -> MetaOapg.properties.allowed_invitee_roles: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_externally_owned"]) -> MetaOapg.properties.is_externally_owned: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["has_collaborations"]) -> MetaOapg.properties.has_collaborations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expires_at"]) -> MetaOapg.properties.expires_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["representations"]) -> MetaOapg.properties.representations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["uploader_display_name"]) -> MetaOapg.properties.uploader_display_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["disposition_at"]) -> MetaOapg.properties.disposition_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shared_link_permission_options"]) -> MetaOapg.properties.shared_link_permission_options: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "version_number", "comment_count", "permissions", "lock", "extension", "is_package", "expiring_embed_link", "watermark_info", "is_accessible_via_shared_link", "allowed_invitee_roles", "is_externally_owned", "has_collaborations", "metadata", "expires_at", "representations", "classification", "uploader_display_name", "disposition_at", "shared_link_permission_options", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["version_number"]) -> typing.Union[MetaOapg.properties.version_number, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["comment_count"]) -> typing.Union[MetaOapg.properties.comment_count, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["lock"]) -> typing.Union[MetaOapg.properties.lock, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["extension"]) -> typing.Union[MetaOapg.properties.extension, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_package"]) -> typing.Union[MetaOapg.properties.is_package, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expiring_embed_link"]) -> typing.Union[MetaOapg.properties.expiring_embed_link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["watermark_info"]) -> typing.Union[MetaOapg.properties.watermark_info, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_accessible_via_shared_link"]) -> typing.Union[MetaOapg.properties.is_accessible_via_shared_link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["allowed_invitee_roles"]) -> typing.Union[MetaOapg.properties.allowed_invitee_roles, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_externally_owned"]) -> typing.Union[MetaOapg.properties.is_externally_owned, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["has_collaborations"]) -> typing.Union[MetaOapg.properties.has_collaborations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expires_at"]) -> typing.Union[MetaOapg.properties.expires_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["representations"]) -> typing.Union[MetaOapg.properties.representations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["uploader_display_name"]) -> typing.Union[MetaOapg.properties.uploader_display_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["disposition_at"]) -> typing.Union[MetaOapg.properties.disposition_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shared_link_permission_options"]) -> typing.Union[MetaOapg.properties.shared_link_permission_options, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "version_number", "comment_count", "permissions", "lock", "extension", "is_package", "expiring_embed_link", "watermark_info", "is_accessible_via_shared_link", "allowed_invitee_roles", "is_externally_owned", "has_collaborations", "metadata", "expires_at", "representations", "classification", "uploader_display_name", "disposition_at", "shared_link_permission_options", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                version_number: typing.Union[MetaOapg.properties.version_number, str, schemas.Unset] = schemas.unset,
                comment_count: typing.Union[MetaOapg.properties.comment_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                lock: typing.Union[MetaOapg.properties.lock, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                extension: typing.Union[MetaOapg.properties.extension, str, schemas.Unset] = schemas.unset,
                is_package: typing.Union[MetaOapg.properties.is_package, bool, schemas.Unset] = schemas.unset,
                expiring_embed_link: typing.Union[MetaOapg.properties.expiring_embed_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                watermark_info: typing.Union[MetaOapg.properties.watermark_info, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                is_accessible_via_shared_link: typing.Union[MetaOapg.properties.is_accessible_via_shared_link, bool, schemas.Unset] = schemas.unset,
                allowed_invitee_roles: typing.Union[MetaOapg.properties.allowed_invitee_roles, list, tuple, schemas.Unset] = schemas.unset,
                is_externally_owned: typing.Union[MetaOapg.properties.is_externally_owned, bool, schemas.Unset] = schemas.unset,
                has_collaborations: typing.Union[MetaOapg.properties.has_collaborations, bool, schemas.Unset] = schemas.unset,
                metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                expires_at: typing.Union[MetaOapg.properties.expires_at, None, str, datetime, schemas.Unset] = schemas.unset,
                representations: typing.Union[MetaOapg.properties.representations, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                classification: typing.Union[MetaOapg.properties.classification, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                uploader_display_name: typing.Union[MetaOapg.properties.uploader_display_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                disposition_at: typing.Union[MetaOapg.properties.disposition_at, None, str, datetime, schemas.Unset] = schemas.unset,
                shared_link_permission_options: typing.Union[MetaOapg.properties.shared_link_permission_options, list, tuple, None, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    tags=tags,
                    version_number=version_number,
                    comment_count=comment_count,
                    permissions=permissions,
                    lock=lock,
                    extension=extension,
                    is_package=is_package,
                    expiring_embed_link=expiring_embed_link,
                    watermark_info=watermark_info,
                    is_accessible_via_shared_link=is_accessible_via_shared_link,
                    allowed_invitee_roles=allowed_invitee_roles,
                    is_externally_owned=is_externally_owned,
                    has_collaborations=has_collaborations,
                    metadata=metadata,
                    expires_at=expires_at,
                    representations=representations,
                    classification=classification,
                    uploader_display_name=uploader_display_name,
                    disposition_at=disposition_at,
                    shared_link_permission_options=shared_link_permission_options,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                File,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileFull':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.file import File
from box_python_sdk.model.file_or_folder_scope import FileOrFolderScope
from box_python_sdk.model.metadata_base import MetadataBase
from box_python_sdk.model.user_mini import UserMini
