# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class RetentionPoliciesCreatePolicyRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "policy_type",
            "disposition_action",
            "policy_name",
        }
        
        class properties:
            policy_name = schemas.StrSchema
            
            
            class policy_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "finite": "FINITE",
                        "indefinite": "INDEFINITE",
                    }
                
                @schemas.classproperty
                def FINITE(cls):
                    return cls("finite")
                
                @schemas.classproperty
                def INDEFINITE(cls):
                    return cls("indefinite")
            
            
            class disposition_action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "permanently_delete": "PERMANENTLY_DELETE",
                        "remove_retention": "REMOVE_RETENTION",
                    }
                
                @schemas.classproperty
                def PERMANENTLY_DELETE(cls):
                    return cls("permanently_delete")
                
                @schemas.classproperty
                def REMOVE_RETENTION(cls):
                    return cls("remove_retention")
            description = schemas.StrSchema
            
            
            class retention_length(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'int32'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    one_of_1 = schemas.NumberSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'retention_length':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class retention_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "modifiable": "MODIFIABLE",
                        "non_modifiable": "NON_MODIFIABLE",
                    }
                
                @schemas.classproperty
                def MODIFIABLE(cls):
                    return cls("modifiable")
                
                @schemas.classproperty
                def NON_MODIFIABLE(cls):
                    return cls("non_modifiable")
            
            
            class can_owner_extend_retention(
                schemas.EnumBase,
                schemas.BoolSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        True: "TRUE",
                        False: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
            class are_owners_notified(
                schemas.EnumBase,
                schemas.BoolSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        True: "TRUE",
                        False: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
            class custom_notification_recipients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserMini']:
                        return UserMini
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserMini'], typing.List['UserMini']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_notification_recipients':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserMini':
                    return super().__getitem__(i)
            __annotations__ = {
                "policy_name": policy_name,
                "policy_type": policy_type,
                "disposition_action": disposition_action,
                "description": description,
                "retention_length": retention_length,
                "retention_type": retention_type,
                "can_owner_extend_retention": can_owner_extend_retention,
                "are_owners_notified": are_owners_notified,
                "custom_notification_recipients": custom_notification_recipients,
            }
    
    policy_type: MetaOapg.properties.policy_type
    disposition_action: MetaOapg.properties.disposition_action
    policy_name: MetaOapg.properties.policy_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_type"]) -> MetaOapg.properties.policy_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disposition_action"]) -> MetaOapg.properties.disposition_action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retention_length"]) -> MetaOapg.properties.retention_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retention_type"]) -> MetaOapg.properties.retention_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_owner_extend_retention"]) -> MetaOapg.properties.can_owner_extend_retention: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["are_owners_notified"]) -> MetaOapg.properties.are_owners_notified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_notification_recipients"]) -> MetaOapg.properties.custom_notification_recipients: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policy_name", "policy_type", "disposition_action", "description", "retention_length", "retention_type", "can_owner_extend_retention", "are_owners_notified", "custom_notification_recipients", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_type"]) -> MetaOapg.properties.policy_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disposition_action"]) -> MetaOapg.properties.disposition_action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retention_length"]) -> typing.Union[MetaOapg.properties.retention_length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retention_type"]) -> typing.Union[MetaOapg.properties.retention_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_owner_extend_retention"]) -> typing.Union[MetaOapg.properties.can_owner_extend_retention, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["are_owners_notified"]) -> typing.Union[MetaOapg.properties.are_owners_notified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_notification_recipients"]) -> typing.Union[MetaOapg.properties.custom_notification_recipients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policy_name", "policy_type", "disposition_action", "description", "retention_length", "retention_type", "can_owner_extend_retention", "are_owners_notified", "custom_notification_recipients", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        policy_type: typing.Union[MetaOapg.properties.policy_type, str, ],
        disposition_action: typing.Union[MetaOapg.properties.disposition_action, str, ],
        policy_name: typing.Union[MetaOapg.properties.policy_name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        retention_length: typing.Union[MetaOapg.properties.retention_length, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        retention_type: typing.Union[MetaOapg.properties.retention_type, str, schemas.Unset] = schemas.unset,
        can_owner_extend_retention: typing.Union[MetaOapg.properties.can_owner_extend_retention, bool, schemas.Unset] = schemas.unset,
        are_owners_notified: typing.Union[MetaOapg.properties.are_owners_notified, bool, schemas.Unset] = schemas.unset,
        custom_notification_recipients: typing.Union[MetaOapg.properties.custom_notification_recipients, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RetentionPoliciesCreatePolicyRequest':
        return super().__new__(
            cls,
            *args,
            policy_type=policy_type,
            disposition_action=disposition_action,
            policy_name=policy_name,
            description=description,
            retention_length=retention_length,
            retention_type=retention_type,
            can_owner_extend_retention=can_owner_extend_retention,
            are_owners_notified=are_owners_notified,
            custom_notification_recipients=custom_notification_recipients,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.user_mini import UserMini
