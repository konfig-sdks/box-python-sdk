# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class LegalHoldPolicy(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Legal Hold Policy information describes the basic
characteristics of the Policy, such as name, description,
and filter dates.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class description(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 500
                    
                    
                    class policy_name(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 254
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "active": "ACTIVE",
                                "applying": "APPLYING",
                                "releasing": "RELEASING",
                                "released": "RELEASED",
                            }
                        
                        @schemas.classproperty
                        def ACTIVE(cls):
                            return cls("active")
                        
                        @schemas.classproperty
                        def APPLYING(cls):
                            return cls("applying")
                        
                        @schemas.classproperty
                        def RELEASING(cls):
                            return cls("releasing")
                        
                        @schemas.classproperty
                        def RELEASED(cls):
                            return cls("released")
                    
                    
                    class assignment_counts(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                user = schemas.Int64Schema
                                folder = schemas.Int64Schema
                                file = schemas.Int64Schema
                                file_version = schemas.Int64Schema
                                __annotations__ = {
                                    "user": user,
                                    "folder": folder,
                                    "file": file,
                                    "file_version": file_version,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["file_version"]) -> MetaOapg.properties.file_version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", "folder", "file", "file_version", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> typing.Union[MetaOapg.properties.folder, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["file_version"]) -> typing.Union[MetaOapg.properties.file_version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", "folder", "file", "file_version", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            user: typing.Union[MetaOapg.properties.user, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            folder: typing.Union[MetaOapg.properties.folder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            file: typing.Union[MetaOapg.properties.file, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            file_version: typing.Union[MetaOapg.properties.file_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'assignment_counts':
                            return super().__new__(
                                cls,
                                *args,
                                user=user,
                                folder=folder,
                                file=file,
                                file_version=file_version,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class created_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'created_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    created_at = schemas.DateTimeSchema
                    modified_at = schemas.DateTimeSchema
                    deleted_at = schemas.DateTimeSchema
                    filter_started_at = schemas.DateTimeSchema
                    filter_ended_at = schemas.DateTimeSchema
                    
                    
                    class release_notes(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 500
                    __annotations__ = {
                        "description": description,
                        "policy_name": policy_name,
                        "status": status,
                        "assignment_counts": assignment_counts,
                        "created_by": created_by,
                        "created_at": created_at,
                        "modified_at": modified_at,
                        "deleted_at": deleted_at,
                        "filter_started_at": filter_started_at,
                        "filter_ended_at": filter_ended_at,
                        "release_notes": release_notes,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assignment_counts"]) -> MetaOapg.properties.assignment_counts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["filter_started_at"]) -> MetaOapg.properties.filter_started_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["filter_ended_at"]) -> MetaOapg.properties.filter_ended_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["release_notes"]) -> MetaOapg.properties.release_notes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "policy_name", "status", "assignment_counts", "created_by", "created_at", "modified_at", "deleted_at", "filter_started_at", "filter_ended_at", "release_notes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> typing.Union[MetaOapg.properties.policy_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assignment_counts"]) -> typing.Union[MetaOapg.properties.assignment_counts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> typing.Union[MetaOapg.properties.deleted_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["filter_started_at"]) -> typing.Union[MetaOapg.properties.filter_started_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["filter_ended_at"]) -> typing.Union[MetaOapg.properties.filter_ended_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["release_notes"]) -> typing.Union[MetaOapg.properties.release_notes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "policy_name", "status", "assignment_counts", "created_by", "created_at", "modified_at", "deleted_at", "filter_started_at", "filter_ended_at", "release_notes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                policy_name: typing.Union[MetaOapg.properties.policy_name, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                assignment_counts: typing.Union[MetaOapg.properties.assignment_counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, str, datetime, schemas.Unset] = schemas.unset,
                deleted_at: typing.Union[MetaOapg.properties.deleted_at, str, datetime, schemas.Unset] = schemas.unset,
                filter_started_at: typing.Union[MetaOapg.properties.filter_started_at, str, datetime, schemas.Unset] = schemas.unset,
                filter_ended_at: typing.Union[MetaOapg.properties.filter_ended_at, str, datetime, schemas.Unset] = schemas.unset,
                release_notes: typing.Union[MetaOapg.properties.release_notes, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    policy_name=policy_name,
                    status=status,
                    assignment_counts=assignment_counts,
                    created_by=created_by,
                    created_at=created_at,
                    modified_at=modified_at,
                    deleted_at=deleted_at,
                    filter_started_at=filter_started_at,
                    filter_ended_at=filter_ended_at,
                    release_notes=release_notes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                LegalHoldPolicyMini,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LegalHoldPolicy':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.legal_hold_policy_mini import LegalHoldPolicyMini
from box_python_sdk.model.user_mini import UserMini
