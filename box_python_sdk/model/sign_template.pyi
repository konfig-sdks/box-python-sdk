# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class SignTemplate(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A Box Sign template object
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def SIGNTEMPLATE(cls):
                            return cls("sign-template")
                    id = schemas.StrSchema
                    
                    
                    class name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class email_subject(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'email_subject':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class email_message(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'email_message':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class days_valid(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        class MetaOapg:
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'days_valid':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class parent_folder(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FolderMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'parent_folder':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class source_files(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['FileMini']:
                                return FileMini
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['FileMini'], typing.List['FileMini']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'source_files':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'FileMini':
                            return super().__getitem__(i)
                    are_fields_locked = schemas.BoolSchema
                    are_options_locked = schemas.BoolSchema
                    are_recipients_locked = schemas.BoolSchema
                    are_email_settings_locked = schemas.BoolSchema
                    are_files_locked = schemas.BoolSchema
                    
                    
                    class signers(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['TemplateSigner']:
                                return TemplateSigner
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['TemplateSigner'], typing.List['TemplateSigner']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'signers':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'TemplateSigner':
                            return super().__getitem__(i)
                    
                    
                    class additional_info(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class non_editable(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def EMAIL_SUBJECT(cls):
                                                return cls("email_subject")
                                            
                                            @schemas.classproperty
                                            def EMAIL_MESSAGE(cls):
                                                return cls("email_message")
                                            
                                            @schemas.classproperty
                                            def NAME(cls):
                                                return cls("name")
                                            
                                            @schemas.classproperty
                                            def DAYS_VALID(cls):
                                                return cls("days_valid")
                                            
                                            @schemas.classproperty
                                            def SIGNERS(cls):
                                                return cls("signers")
                                            
                                            @schemas.classproperty
                                            def SOURCE_FILES(cls):
                                                return cls("source_files")
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'non_editable':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class required(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class signers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.ListSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            
                                                            class items(
                                                                schemas.EnumBase,
                                                                schemas.StrSchema
                                                            ):
                                                                
                                                                @schemas.classproperty
                                                                def EMAIL(cls):
                                                                    return cls("email")
                                                    
                                                        def __new__(
                                                            cls,
                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                arg,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                            return super().__getitem__(i)
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'signers':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "signers": signers,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["signers"]) -> MetaOapg.properties.signers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["signers", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["signers"]) -> typing.Union[MetaOapg.properties.signers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signers", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        signers: typing.Union[MetaOapg.properties.signers, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'required':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            signers=signers,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "non_editable": non_editable,
                                    "required": required,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["non_editable"]) -> MetaOapg.properties.non_editable: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["non_editable", "required", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["non_editable"]) -> typing.Union[MetaOapg.properties.non_editable, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["non_editable", "required", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            non_editable: typing.Union[MetaOapg.properties.non_editable, list, tuple, schemas.Unset] = schemas.unset,
                            required: typing.Union[MetaOapg.properties.required, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'additional_info':
                            return super().__new__(
                                cls,
                                *args,
                                non_editable=non_editable,
                                required=required,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class ready_sign_link(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                url = schemas.StrSchema
                                
                                
                                class name(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'name':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class instructions(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'instructions':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class folder_id(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'folder_id':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                is_notification_disabled = schemas.BoolSchema
                                is_active = schemas.BoolSchema
                                __annotations__ = {
                                    "url": url,
                                    "name": name,
                                    "instructions": instructions,
                                    "folder_id": folder_id,
                                    "is_notification_disabled": is_notification_disabled,
                                    "is_active": is_active,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["instructions"]) -> MetaOapg.properties.instructions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_notification_disabled"]) -> MetaOapg.properties.is_notification_disabled: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "name", "instructions", "folder_id", "is_notification_disabled", "is_active", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["instructions"]) -> typing.Union[MetaOapg.properties.instructions, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> typing.Union[MetaOapg.properties.folder_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_notification_disabled"]) -> typing.Union[MetaOapg.properties.is_notification_disabled, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "name", "instructions", "folder_id", "is_notification_disabled", "is_active", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
                            instructions: typing.Union[MetaOapg.properties.instructions, None, str, schemas.Unset] = schemas.unset,
                            folder_id: typing.Union[MetaOapg.properties.folder_id, None, str, schemas.Unset] = schemas.unset,
                            is_notification_disabled: typing.Union[MetaOapg.properties.is_notification_disabled, bool, schemas.Unset] = schemas.unset,
                            is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'ready_sign_link':
                            return super().__new__(
                                cls,
                                *args,
                                url=url,
                                name=name,
                                instructions=instructions,
                                folder_id=folder_id,
                                is_notification_disabled=is_notification_disabled,
                                is_active=is_active,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class custom_branding(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class company_name(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'company_name':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class logo_uri(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'logo_uri':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class branding_color(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'branding_color':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class email_footer_text(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'email_footer_text':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "company_name": company_name,
                                    "logo_uri": logo_uri,
                                    "branding_color": branding_color,
                                    "email_footer_text": email_footer_text,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["company_name"]) -> MetaOapg.properties.company_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["logo_uri"]) -> MetaOapg.properties.logo_uri: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["branding_color"]) -> MetaOapg.properties.branding_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["email_footer_text"]) -> MetaOapg.properties.email_footer_text: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["company_name", "logo_uri", "branding_color", "email_footer_text", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["company_name"]) -> typing.Union[MetaOapg.properties.company_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["logo_uri"]) -> typing.Union[MetaOapg.properties.logo_uri, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["branding_color"]) -> typing.Union[MetaOapg.properties.branding_color, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["email_footer_text"]) -> typing.Union[MetaOapg.properties.email_footer_text, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["company_name", "logo_uri", "branding_color", "email_footer_text", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            company_name: typing.Union[MetaOapg.properties.company_name, None, str, schemas.Unset] = schemas.unset,
                            logo_uri: typing.Union[MetaOapg.properties.logo_uri, None, str, schemas.Unset] = schemas.unset,
                            branding_color: typing.Union[MetaOapg.properties.branding_color, None, str, schemas.Unset] = schemas.unset,
                            email_footer_text: typing.Union[MetaOapg.properties.email_footer_text, None, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'custom_branding':
                            return super().__new__(
                                cls,
                                *args,
                                company_name=company_name,
                                logo_uri=logo_uri,
                                branding_color=branding_color,
                                email_footer_text=email_footer_text,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "type": type,
                        "id": id,
                        "name": name,
                        "email_subject": email_subject,
                        "email_message": email_message,
                        "days_valid": days_valid,
                        "parent_folder": parent_folder,
                        "source_files": source_files,
                        "are_fields_locked": are_fields_locked,
                        "are_options_locked": are_options_locked,
                        "are_recipients_locked": are_recipients_locked,
                        "are_email_settings_locked": are_email_settings_locked,
                        "are_files_locked": are_files_locked,
                        "signers": signers,
                        "additional_info": additional_info,
                        "ready_sign_link": ready_sign_link,
                        "custom_branding": custom_branding,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["email_subject"]) -> MetaOapg.properties.email_subject: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["email_message"]) -> MetaOapg.properties.email_message: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["days_valid"]) -> MetaOapg.properties.days_valid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["parent_folder"]) -> MetaOapg.properties.parent_folder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["source_files"]) -> MetaOapg.properties.source_files: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_fields_locked"]) -> MetaOapg.properties.are_fields_locked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_options_locked"]) -> MetaOapg.properties.are_options_locked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_recipients_locked"]) -> MetaOapg.properties.are_recipients_locked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_email_settings_locked"]) -> MetaOapg.properties.are_email_settings_locked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_files_locked"]) -> MetaOapg.properties.are_files_locked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signers"]) -> MetaOapg.properties.signers: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["additional_info"]) -> MetaOapg.properties.additional_info: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ready_sign_link"]) -> MetaOapg.properties.ready_sign_link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_branding"]) -> MetaOapg.properties.custom_branding: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", "email_subject", "email_message", "days_valid", "parent_folder", "source_files", "are_fields_locked", "are_options_locked", "are_recipients_locked", "are_email_settings_locked", "are_files_locked", "signers", "additional_info", "ready_sign_link", "custom_branding", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["email_subject"]) -> typing.Union[MetaOapg.properties.email_subject, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["email_message"]) -> typing.Union[MetaOapg.properties.email_message, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["days_valid"]) -> typing.Union[MetaOapg.properties.days_valid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["parent_folder"]) -> typing.Union[MetaOapg.properties.parent_folder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["source_files"]) -> typing.Union[MetaOapg.properties.source_files, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_fields_locked"]) -> typing.Union[MetaOapg.properties.are_fields_locked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_options_locked"]) -> typing.Union[MetaOapg.properties.are_options_locked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_recipients_locked"]) -> typing.Union[MetaOapg.properties.are_recipients_locked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_email_settings_locked"]) -> typing.Union[MetaOapg.properties.are_email_settings_locked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_files_locked"]) -> typing.Union[MetaOapg.properties.are_files_locked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signers"]) -> typing.Union[MetaOapg.properties.signers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["additional_info"]) -> typing.Union[MetaOapg.properties.additional_info, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ready_sign_link"]) -> typing.Union[MetaOapg.properties.ready_sign_link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_branding"]) -> typing.Union[MetaOapg.properties.custom_branding, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", "email_subject", "email_message", "days_valid", "parent_folder", "source_files", "are_fields_locked", "are_options_locked", "are_recipients_locked", "are_email_settings_locked", "are_files_locked", "signers", "additional_info", "ready_sign_link", "custom_branding", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
                email_subject: typing.Union[MetaOapg.properties.email_subject, None, str, schemas.Unset] = schemas.unset,
                email_message: typing.Union[MetaOapg.properties.email_message, None, str, schemas.Unset] = schemas.unset,
                days_valid: typing.Union[MetaOapg.properties.days_valid, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                parent_folder: typing.Union[MetaOapg.properties.parent_folder, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                source_files: typing.Union[MetaOapg.properties.source_files, list, tuple, schemas.Unset] = schemas.unset,
                are_fields_locked: typing.Union[MetaOapg.properties.are_fields_locked, bool, schemas.Unset] = schemas.unset,
                are_options_locked: typing.Union[MetaOapg.properties.are_options_locked, bool, schemas.Unset] = schemas.unset,
                are_recipients_locked: typing.Union[MetaOapg.properties.are_recipients_locked, bool, schemas.Unset] = schemas.unset,
                are_email_settings_locked: typing.Union[MetaOapg.properties.are_email_settings_locked, bool, schemas.Unset] = schemas.unset,
                are_files_locked: typing.Union[MetaOapg.properties.are_files_locked, bool, schemas.Unset] = schemas.unset,
                signers: typing.Union[MetaOapg.properties.signers, list, tuple, schemas.Unset] = schemas.unset,
                additional_info: typing.Union[MetaOapg.properties.additional_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                ready_sign_link: typing.Union[MetaOapg.properties.ready_sign_link, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                custom_branding: typing.Union[MetaOapg.properties.custom_branding, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    type=type,
                    id=id,
                    name=name,
                    email_subject=email_subject,
                    email_message=email_message,
                    days_valid=days_valid,
                    parent_folder=parent_folder,
                    source_files=source_files,
                    are_fields_locked=are_fields_locked,
                    are_options_locked=are_options_locked,
                    are_recipients_locked=are_recipients_locked,
                    are_email_settings_locked=are_email_settings_locked,
                    are_files_locked=are_files_locked,
                    signers=signers,
                    additional_info=additional_info,
                    ready_sign_link=ready_sign_link,
                    custom_branding=custom_branding,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignTemplate':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.file_mini import FileMini
from box_python_sdk.model.folder_mini import FolderMini
from box_python_sdk.model.template_signer import TemplateSigner
