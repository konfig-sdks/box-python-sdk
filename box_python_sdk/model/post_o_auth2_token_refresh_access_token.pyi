# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class PostOAuth2TokenRefreshAccessToken(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A request to refresh an Access Token. Use this API to refresh an expired
Access Token using a valid Refresh Token.
    """


    class MetaOapg:
        required = {
            "refresh_token",
            "grant_type",
            "client_secret",
            "client_id",
        }
        
        class properties:
            
            
            class grant_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def REFRESH_TOKEN(cls):
                    return cls("refresh_token")
            client_id = schemas.StrSchema
            client_secret = schemas.StrSchema
            refresh_token = schemas.StrSchema
            __annotations__ = {
                "grant_type": grant_type,
                "client_id": client_id,
                "client_secret": client_secret,
                "refresh_token": refresh_token,
            }
    
    refresh_token: MetaOapg.properties.refresh_token
    grant_type: MetaOapg.properties.grant_type
    client_secret: MetaOapg.properties.client_secret
    client_id: MetaOapg.properties.client_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grant_type"]) -> MetaOapg.properties.grant_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_secret"]) -> MetaOapg.properties.client_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_token"]) -> MetaOapg.properties.refresh_token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grant_type", "client_id", "client_secret", "refresh_token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grant_type"]) -> MetaOapg.properties.grant_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_secret"]) -> MetaOapg.properties.client_secret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_token"]) -> MetaOapg.properties.refresh_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grant_type", "client_id", "client_secret", "refresh_token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        refresh_token: typing.Union[MetaOapg.properties.refresh_token, str, ],
        grant_type: typing.Union[MetaOapg.properties.grant_type, str, ],
        client_secret: typing.Union[MetaOapg.properties.client_secret, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostOAuth2TokenRefreshAccessToken':
        return super().__new__(
            cls,
            *args,
            refresh_token=refresh_token,
            grant_type=grant_type,
            client_secret=client_secret,
            client_id=client_id,
            _configuration=_configuration,
            **kwargs,
        )
