# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class Workflow(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Box Relay Workflows are objects that represent a named collection of flows.

Your application must be authorized to use the `Manage Box Relay` application
scope within the developer console in order to use this resource.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class flows(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        id = schemas.StrSchema
                                        
                                        
                                        class type(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                            
                                            @schemas.classproperty
                                            def FLOW(cls):
                                                return cls("flow")
                                        
                                        
                                        class trigger(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class all_of_0(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            
                                                            
                                                            class type(
                                                                schemas.EnumBase,
                                                                schemas.StrSchema
                                                            ):
                                                                
                                                                @schemas.classproperty
                                                                def TRIGGER(cls):
                                                                    return cls("trigger")
                                                            
                                                            
                                                            class trigger_type(
                                                                schemas.EnumBase,
                                                                schemas.StrSchema
                                                            ):
                                                                
                                                                @schemas.classproperty
                                                                def WORKFLOW_MANUAL_START(cls):
                                                                    return cls("WORKFLOW_MANUAL_START")
                                                            
                                                            
                                                            class scope(
                                                                schemas.ListSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    
                                                                    class items(
                                                                        schemas.DictSchema
                                                                    ):
                                                                    
                                                                    
                                                                        class MetaOapg:
                                                                            
                                                                            class properties:
                                                                                
                                                                                
                                                                                class type(
                                                                                    schemas.EnumBase,
                                                                                    schemas.StrSchema
                                                                                ):
                                                                                    
                                                                                    @schemas.classproperty
                                                                                    def TRIGGER_SCOPE(cls):
                                                                                        return cls("trigger_scope")
                                                                                ref = schemas.StrSchema
                                                                                
                                                                                
                                                                                class object(
                                                                                    schemas.DictSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        
                                                                                        class properties:
                                                                                            
                                                                                            
                                                                                            class type(
                                                                                                schemas.EnumBase,
                                                                                                schemas.StrSchema
                                                                                            ):
                                                                                                
                                                                                                @schemas.classproperty
                                                                                                def FOLDER(cls):
                                                                                                    return cls("folder")
                                                                                            id = schemas.StrSchema
                                                                                            __annotations__ = {
                                                                                                "type": type,
                                                                                                "id": id,
                                                                                            }
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                    
                                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", ], str]):
                                                                                        # dict_instance[name] accessor
                                                                                        return super().__getitem__(name)
                                                                                    
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                    
                                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", ], str]):
                                                                                        return super().get_item_oapg(name)
                                                                                    
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                    ) -> 'object':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *args,
                                                                                            type=type,
                                                                                            id=id,
                                                                                            _configuration=_configuration,
                                                                                            **kwargs,
                                                                                        )
                                                                                __annotations__ = {
                                                                                    "type": type,
                                                                                    "ref": ref,
                                                                                    "object": object,
                                                                                }
                                                                        
                                                                        @typing.overload
                                                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                        
                                                                        @typing.overload
                                                                        def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                                                                        
                                                                        @typing.overload
                                                                        def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
                                                                        
                                                                        @typing.overload
                                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                        
                                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "ref", "object", ], str]):
                                                                            # dict_instance[name] accessor
                                                                            return super().__getitem__(name)
                                                                        
                                                                        
                                                                        @typing.overload
                                                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                                        
                                                                        @typing.overload
                                                                        def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
                                                                        
                                                                        @typing.overload
                                                                        def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
                                                                        
                                                                        @typing.overload
                                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                        
                                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "ref", "object", ], str]):
                                                                            return super().get_item_oapg(name)
                                                                        
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                            ref: typing.Union[MetaOapg.properties.ref, str, schemas.Unset] = schemas.unset,
                                                                            object: typing.Union[MetaOapg.properties.object, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                        ) -> 'items':
                                                                            return super().__new__(
                                                                                cls,
                                                                                *args,
                                                                                type=type,
                                                                                ref=ref,
                                                                                object=object,
                                                                                _configuration=_configuration,
                                                                                **kwargs,
                                                                            )
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                ) -> 'scope':
                                                                    return super().__new__(
                                                                        cls,
                                                                        arg,
                                                                        _configuration=_configuration,
                                                                    )
                                                            
                                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                                    return super().__getitem__(i)
                                                            __annotations__ = {
                                                                "type": type,
                                                                "trigger_type": trigger_type,
                                                                "scope": scope,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["trigger_type"]) -> MetaOapg.properties.trigger_type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "trigger_type", "scope", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["trigger_type"]) -> typing.Union[MetaOapg.properties.trigger_type, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "trigger_type", "scope", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                        trigger_type: typing.Union[MetaOapg.properties.trigger_type, str, schemas.Unset] = schemas.unset,
                                                        scope: typing.Union[MetaOapg.properties.scope, list, tuple, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'all_of_0':
                                                        return super().__new__(
                                                            cls,
                                                            *args,
                                                            type=type,
                                                            trigger_type=trigger_type,
                                                            scope=scope,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                all_of_1 = schemas.AnyTypeSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def all_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        cls.all_of_0,
                                                        cls.all_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'trigger':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        
                                        class outcomes(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class all_of_0(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class items(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    id = schemas.StrSchema
                                                                    
                                                                    
                                                                    class type(
                                                                        schemas.EnumBase,
                                                                        schemas.StrSchema
                                                                    ):
                                                                        
                                                                        @schemas.classproperty
                                                                        def OUTCOME(cls):
                                                                            return cls("outcome")
                                                                    name = schemas.StrSchema
                                                                    
                                                                    
                                                                    class action_type(
                                                                        schemas.ComposedSchema,
                                                                    ):
                                                                    
                                                                    
                                                                        class MetaOapg:
                                                                            
                                                                            
                                                                            class all_of_0(
                                                                                schemas.EnumBase,
                                                                                schemas.StrSchema
                                                                            ):
                                                                                
                                                                                @schemas.classproperty
                                                                                def ADD_METADATA(cls):
                                                                                    return cls("add_metadata")
                                                                                
                                                                                @schemas.classproperty
                                                                                def ASSIGN_TASK(cls):
                                                                                    return cls("assign_task")
                                                                                
                                                                                @schemas.classproperty
                                                                                def COPY_FILE(cls):
                                                                                    return cls("copy_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def COPY_FOLDER(cls):
                                                                                    return cls("copy_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def CREATE_FOLDER(cls):
                                                                                    return cls("create_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def DELETE_FILE(cls):
                                                                                    return cls("delete_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def DELETE_FOLDER(cls):
                                                                                    return cls("delete_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def LOCK_FILE(cls):
                                                                                    return cls("lock_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def MOVE_FILE(cls):
                                                                                    return cls("move_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def MOVE_FOLDER(cls):
                                                                                    return cls("move_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def REMOVE_WATERMARK_FILE(cls):
                                                                                    return cls("remove_watermark_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def RENAME_FOLDER(cls):
                                                                                    return cls("rename_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def RESTORE_FOLDER(cls):
                                                                                    return cls("restore_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def SHARE_FILE(cls):
                                                                                    return cls("share_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def SHARE_FOLDER(cls):
                                                                                    return cls("share_folder")
                                                                                
                                                                                @schemas.classproperty
                                                                                def UNLOCK_FILE(cls):
                                                                                    return cls("unlock_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def UPLOAD_FILE(cls):
                                                                                    return cls("upload_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def WAIT_FOR_TASK(cls):
                                                                                    return cls("wait_for_task")
                                                                                
                                                                                @schemas.classproperty
                                                                                def WATERMARK_FILE(cls):
                                                                                    return cls("watermark_file")
                                                                                
                                                                                @schemas.classproperty
                                                                                def GO_BACK_TO_STEP(cls):
                                                                                    return cls("go_back_to_step")
                                                                                
                                                                                @schemas.classproperty
                                                                                def APPLY_FILE_CLASSIFICATION(cls):
                                                                                    return cls("apply_file_classification")
                                                                                
                                                                                @schemas.classproperty
                                                                                def APPLY_FOLDER_CLASSIFICATION(cls):
                                                                                    return cls("apply_folder_classification")
                                                                                
                                                                                @schemas.classproperty
                                                                                def SEND_NOTIFICATION(cls):
                                                                                    return cls("send_notification")
                                                                            all_of_1 = schemas.AnyTypeSchema
                                                                            
                                                                            @classmethod
                                                                            @functools.lru_cache()
                                                                            def all_of(cls):
                                                                                # we need this here to make our import statements work
                                                                                # we must store _composed_schemas in here so the code is only run
                                                                                # when we invoke this method. If we kept this at the class
                                                                                # level we would get an error because the class level
                                                                                # code would be run when this module is imported, and these composed
                                                                                # classes don't exist yet because their module has not finished
                                                                                # loading
                                                                                return [
                                                                                    cls.all_of_0,
                                                                                    cls.all_of_1,
                                                                                ]
                                                                    
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                        ) -> 'action_type':
                                                                            return super().__new__(
                                                                                cls,
                                                                                *args,
                                                                                _configuration=_configuration,
                                                                                **kwargs,
                                                                            )
                                                                    
                                                                    
                                                                    class if_rejected(
                                                                        schemas.ListSchema
                                                                    ):
                                                                    
                                                                    
                                                                        class MetaOapg:
                                                                            
                                                                            
                                                                            class items(
                                                                                schemas.DictSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    
                                                                                    class properties:
                                                                                        id = schemas.StrSchema
                                                                                        
                                                                                        
                                                                                        class type(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def OUTCOME(cls):
                                                                                                return cls("outcome")
                                                                                        name = schemas.StrSchema
                                                                                        
                                                                                        
                                                                                        class action_type(
                                                                                            schemas.ComposedSchema,
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                
                                                                                                
                                                                                                class all_of_0(
                                                                                                    schemas.EnumBase,
                                                                                                    schemas.StrSchema
                                                                                                ):
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def ADD_METADATA(cls):
                                                                                                        return cls("add_metadata")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def ASSIGN_TASK(cls):
                                                                                                        return cls("assign_task")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def COPY_FILE(cls):
                                                                                                        return cls("copy_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def COPY_FOLDER(cls):
                                                                                                        return cls("copy_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def CREATE_FOLDER(cls):
                                                                                                        return cls("create_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def DELETE_FILE(cls):
                                                                                                        return cls("delete_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def DELETE_FOLDER(cls):
                                                                                                        return cls("delete_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def LOCK_FILE(cls):
                                                                                                        return cls("lock_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def MOVE_FILE(cls):
                                                                                                        return cls("move_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def MOVE_FOLDER(cls):
                                                                                                        return cls("move_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def REMOVE_WATERMARK_FILE(cls):
                                                                                                        return cls("remove_watermark_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def RENAME_FOLDER(cls):
                                                                                                        return cls("rename_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def RESTORE_FOLDER(cls):
                                                                                                        return cls("restore_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def SHARE_FILE(cls):
                                                                                                        return cls("share_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def SHARE_FOLDER(cls):
                                                                                                        return cls("share_folder")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def UNLOCK_FILE(cls):
                                                                                                        return cls("unlock_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def UPLOAD_FILE(cls):
                                                                                                        return cls("upload_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def WAIT_FOR_TASK(cls):
                                                                                                        return cls("wait_for_task")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def WATERMARK_FILE(cls):
                                                                                                        return cls("watermark_file")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def GO_BACK_TO_STEP(cls):
                                                                                                        return cls("go_back_to_step")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def APPLY_FILE_CLASSIFICATION(cls):
                                                                                                        return cls("apply_file_classification")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def APPLY_FOLDER_CLASSIFICATION(cls):
                                                                                                        return cls("apply_folder_classification")
                                                                                                    
                                                                                                    @schemas.classproperty
                                                                                                    def SEND_NOTIFICATION(cls):
                                                                                                        return cls("send_notification")
                                                                                                all_of_1 = schemas.AnyTypeSchema
                                                                                                
                                                                                                @classmethod
                                                                                                @functools.lru_cache()
                                                                                                def all_of(cls):
                                                                                                    # we need this here to make our import statements work
                                                                                                    # we must store _composed_schemas in here so the code is only run
                                                                                                    # when we invoke this method. If we kept this at the class
                                                                                                    # level we would get an error because the class level
                                                                                                    # code would be run when this module is imported, and these composed
                                                                                                    # classes don't exist yet because their module has not finished
                                                                                                    # loading
                                                                                                    return [
                                                                                                        cls.all_of_0,
                                                                                                        cls.all_of_1,
                                                                                                    ]
                                                                                        
                                                                                        
                                                                                            def __new__(
                                                                                                cls,
                                                                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                            ) -> 'action_type':
                                                                                                return super().__new__(
                                                                                                    cls,
                                                                                                    *args,
                                                                                                    _configuration=_configuration,
                                                                                                    **kwargs,
                                                                                                )
                                                                                        __annotations__ = {
                                                                                            "id": id,
                                                                                            "type": type,
                                                                                            "name": name,
                                                                                            "action_type": action_type,
                                                                                        }
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["action_type"]) -> MetaOapg.properties.action_type: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                
                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "name", "action_type", ], str]):
                                                                                    # dict_instance[name] accessor
                                                                                    return super().__getitem__(name)
                                                                                
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["action_type"]) -> typing.Union[MetaOapg.properties.action_type, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                
                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "name", "action_type", ], str]):
                                                                                    return super().get_item_oapg(name)
                                                                                
                                                                            
                                                                                def __new__(
                                                                                    cls,
                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                                                    action_type: typing.Union[MetaOapg.properties.action_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                ) -> 'items':
                                                                                    return super().__new__(
                                                                                        cls,
                                                                                        *args,
                                                                                        id=id,
                                                                                        type=type,
                                                                                        name=name,
                                                                                        action_type=action_type,
                                                                                        _configuration=_configuration,
                                                                                        **kwargs,
                                                                                    )
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        ) -> 'if_rejected':
                                                                            return super().__new__(
                                                                                cls,
                                                                                arg,
                                                                                _configuration=_configuration,
                                                                            )
                                                                    
                                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                                            return super().__getitem__(i)
                                                                    __annotations__ = {
                                                                        "id": id,
                                                                        "type": type,
                                                                        "name": name,
                                                                        "action_type": action_type,
                                                                        "if_rejected": if_rejected,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["action_type"]) -> MetaOapg.properties.action_type: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["if_rejected"]) -> MetaOapg.properties.if_rejected: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "name", "action_type", "if_rejected", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["action_type"]) -> typing.Union[MetaOapg.properties.action_type, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["if_rejected"]) -> typing.Union[MetaOapg.properties.if_rejected, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "name", "action_type", "if_rejected", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                                action_type: typing.Union[MetaOapg.properties.action_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                                if_rejected: typing.Union[MetaOapg.properties.if_rejected, list, tuple, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'items':
                                                                return super().__new__(
                                                                    cls,
                                                                    *args,
                                                                    id=id,
                                                                    type=type,
                                                                    name=name,
                                                                    action_type=action_type,
                                                                    if_rejected=if_rejected,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'all_of_0':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                all_of_1 = schemas.AnyTypeSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def all_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        cls.all_of_0,
                                                        cls.all_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'outcomes':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        created_at = schemas.DateTimeSchema
                                        
                                        
                                        class created_by(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                all_of_1 = schemas.AnyTypeSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def all_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        UserBase,
                                                        cls.all_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'created_by':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        __annotations__ = {
                                            "id": id,
                                            "type": type,
                                            "trigger": trigger,
                                            "outcomes": outcomes,
                                            "created_at": created_at,
                                            "created_by": created_by,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["trigger"]) -> MetaOapg.properties.trigger: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["outcomes"]) -> MetaOapg.properties.outcomes: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "trigger", "outcomes", "created_at", "created_by", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["trigger"]) -> typing.Union[MetaOapg.properties.trigger, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["outcomes"]) -> typing.Union[MetaOapg.properties.outcomes, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "trigger", "outcomes", "created_at", "created_by", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                    trigger: typing.Union[MetaOapg.properties.trigger, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    outcomes: typing.Union[MetaOapg.properties.outcomes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                                    created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        type=type,
                                        trigger=trigger,
                                        outcomes=outcomes,
                                        created_at=created_at,
                                        created_by=created_by,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'flows':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "flows": flows,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["flows"]) -> MetaOapg.properties.flows: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["flows", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["flows"]) -> typing.Union[MetaOapg.properties.flows, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flows", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                flows: typing.Union[MetaOapg.properties.flows, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    flows=flows,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                WorkflowMini,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Workflow':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.user_base import UserBase
from box_python_sdk.model.workflow_mini import WorkflowMini
