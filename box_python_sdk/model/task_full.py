# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class TaskFull(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The full representation of a task.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    description = schemas.StrSchema
                
                    @staticmethod
                    def assigned_to() -> typing.Type['TaskAssignees']:
                        return TaskAssignees
                    
                    
                    class completed_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'completed_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class completion_rule(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "all_assignees": "ALL_ASSIGNEES",
                                "any_assignee": "ANY_ASSIGNEE",
                            }
                        
                        @schemas.classproperty
                        def ALL_ASSIGNEES(cls):
                            return cls("all_assignees")
                        
                        @schemas.classproperty
                        def ANY_ASSIGNEE(cls):
                            return cls("any_assignee")
                    created_at = schemas.DateTimeSchema
                    
                    
                    class created_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    FileActivityUser,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'created_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    modified_at = schemas.DateTimeSchema
                    
                    
                    class permissions(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                can_create_task_collaborator = schemas.BoolSchema
                                can_create_task_link = schemas.BoolSchema
                                can_delete = schemas.BoolSchema
                                can_update = schemas.BoolSchema
                                __annotations__ = {
                                    "can_create_task_collaborator": can_create_task_collaborator,
                                    "can_create_task_link": can_create_task_link,
                                    "can_delete": can_delete,
                                    "can_update": can_update,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_create_task_collaborator"]) -> MetaOapg.properties.can_create_task_collaborator: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_create_task_link"]) -> MetaOapg.properties.can_create_task_link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_update"]) -> MetaOapg.properties.can_update: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_create_task_collaborator", "can_create_task_link", "can_delete", "can_update", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_create_task_collaborator"]) -> typing.Union[MetaOapg.properties.can_create_task_collaborator, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_create_task_link"]) -> typing.Union[MetaOapg.properties.can_create_task_link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> typing.Union[MetaOapg.properties.can_delete, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_update"]) -> typing.Union[MetaOapg.properties.can_update, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_create_task_collaborator", "can_create_task_link", "can_delete", "can_update", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            can_create_task_collaborator: typing.Union[MetaOapg.properties.can_create_task_collaborator, bool, schemas.Unset] = schemas.unset,
                            can_create_task_link: typing.Union[MetaOapg.properties.can_create_task_link, bool, schemas.Unset] = schemas.unset,
                            can_delete: typing.Union[MetaOapg.properties.can_delete, bool, schemas.Unset] = schemas.unset,
                            can_update: typing.Union[MetaOapg.properties.can_update, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'permissions':
                            return super().__new__(
                                cls,
                                *args,
                                can_create_task_collaborator=can_create_task_collaborator,
                                can_create_task_link=can_create_task_link,
                                can_delete=can_delete,
                                can_update=can_update,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    progress_at = schemas.DateTimeSchema
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "approved": "APPROVED",
                                "completed": "COMPLETED",
                                "in_progress": "IN_PROGRESS",
                                "not_started": "NOT_STARTED",
                                "rejected": "REJECTED",
                            }
                        
                        @schemas.classproperty
                        def APPROVED(cls):
                            return cls("approved")
                        
                        @schemas.classproperty
                        def COMPLETED(cls):
                            return cls("completed")
                        
                        @schemas.classproperty
                        def IN_PROGRESS(cls):
                            return cls("in_progress")
                        
                        @schemas.classproperty
                        def NOT_STARTED(cls):
                            return cls("not_started")
                        
                        @schemas.classproperty
                        def REJECTED(cls):
                            return cls("rejected")
                
                    @staticmethod
                    def task_links() -> typing.Type['TaskLinks']:
                        return TaskLinks
                    
                    
                    class task_type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "approval": "APPROVAL",
                                "general": "GENERAL",
                            }
                        
                        @schemas.classproperty
                        def APPROVAL(cls):
                            return cls("approval")
                        
                        @schemas.classproperty
                        def GENERAL(cls):
                            return cls("general")
                    __annotations__ = {
                        "description": description,
                        "assigned_to": assigned_to,
                        "completed_at": completed_at,
                        "completion_rule": completion_rule,
                        "created_at": created_at,
                        "created_by": created_by,
                        "modified_at": modified_at,
                        "permissions": permissions,
                        "progress_at": progress_at,
                        "status": status,
                        "task_links": task_links,
                        "task_type": task_type,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assigned_to"]) -> 'TaskAssignees': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completed_at"]) -> MetaOapg.properties.completed_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completion_rule"]) -> MetaOapg.properties.completion_rule: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["progress_at"]) -> MetaOapg.properties.progress_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["task_links"]) -> 'TaskLinks': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["task_type"]) -> MetaOapg.properties.task_type: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "assigned_to", "completed_at", "completion_rule", "created_at", "created_by", "modified_at", "permissions", "progress_at", "status", "task_links", "task_type", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assigned_to"]) -> typing.Union['TaskAssignees', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completed_at"]) -> typing.Union[MetaOapg.properties.completed_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completion_rule"]) -> typing.Union[MetaOapg.properties.completion_rule, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["progress_at"]) -> typing.Union[MetaOapg.properties.progress_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["task_links"]) -> typing.Union['TaskLinks', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["task_type"]) -> typing.Union[MetaOapg.properties.task_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "assigned_to", "completed_at", "completion_rule", "created_at", "created_by", "modified_at", "permissions", "progress_at", "status", "task_links", "task_type", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                assigned_to: typing.Union['TaskAssignees', schemas.Unset] = schemas.unset,
                completed_at: typing.Union[MetaOapg.properties.completed_at, None, str, datetime, schemas.Unset] = schemas.unset,
                completion_rule: typing.Union[MetaOapg.properties.completion_rule, str, schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, str, datetime, schemas.Unset] = schemas.unset,
                permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                progress_at: typing.Union[MetaOapg.properties.progress_at, str, datetime, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                task_links: typing.Union['TaskLinks', schemas.Unset] = schemas.unset,
                task_type: typing.Union[MetaOapg.properties.task_type, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    assigned_to=assigned_to,
                    completed_at=completed_at,
                    completion_rule=completion_rule,
                    created_at=created_at,
                    created_by=created_by,
                    modified_at=modified_at,
                    permissions=permissions,
                    progress_at=progress_at,
                    status=status,
                    task_links=task_links,
                    task_type=task_type,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TaskBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskFull':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.file_activity_user import FileActivityUser
from box_python_sdk.model.task_assignees import TaskAssignees
from box_python_sdk.model.task_base import TaskBase
from box_python_sdk.model.task_links import TaskLinks
