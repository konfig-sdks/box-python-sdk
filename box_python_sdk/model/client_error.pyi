# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class ClientError(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A generic error
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
            status = schemas.Int32Schema
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATED(cls):
                    return cls("created")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("accepted")
                
                @schemas.classproperty
                def NO_CONTENT(cls):
                    return cls("no_content")
                
                @schemas.classproperty
                def REDIRECT(cls):
                    return cls("redirect")
                
                @schemas.classproperty
                def NOT_MODIFIED(cls):
                    return cls("not_modified")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("bad_request")
                
                @schemas.classproperty
                def UNAUTHORIZED(cls):
                    return cls("unauthorized")
                
                @schemas.classproperty
                def FORBIDDEN(cls):
                    return cls("forbidden")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("not_found")
                
                @schemas.classproperty
                def METHOD_NOT_ALLOWED(cls):
                    return cls("method_not_allowed")
                
                @schemas.classproperty
                def CONFLICT(cls):
                    return cls("conflict")
                
                @schemas.classproperty
                def PRECONDITION_FAILED(cls):
                    return cls("precondition_failed")
                
                @schemas.classproperty
                def TOO_MANY_REQUESTS(cls):
                    return cls("too_many_requests")
                
                @schemas.classproperty
                def INTERNAL_SERVER_ERROR(cls):
                    return cls("internal_server_error")
                
                @schemas.classproperty
                def UNAVAILABLE(cls):
                    return cls("unavailable")
                
                @schemas.classproperty
                def ITEM_NAME_INVALID(cls):
                    return cls("item_name_invalid")
                
                @schemas.classproperty
                def INSUFFICIENT_SCOPE(cls):
                    return cls("insufficient_scope")
            message = schemas.StrSchema
        
            @staticmethod
            def context_info() -> typing.Type['ClientErrorContextInfo']:
                return ClientErrorContextInfo
            help_url = schemas.StrSchema
            request_id = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "status": status,
                "code": code,
                "message": message,
                "context_info": context_info,
                "help_url": help_url,
                "request_id": request_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context_info"]) -> 'ClientErrorContextInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["help_url"]) -> MetaOapg.properties.help_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "status", "code", "message", "context_info", "help_url", "request_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context_info"]) -> typing.Union['ClientErrorContextInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["help_url"]) -> typing.Union[MetaOapg.properties.help_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "status", "code", "message", "context_info", "help_url", "request_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        context_info: typing.Union['ClientErrorContextInfo', schemas.Unset] = schemas.unset,
        help_url: typing.Union[MetaOapg.properties.help_url, str, schemas.Unset] = schemas.unset,
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientError':
        return super().__new__(
            cls,
            *args,
            type=type,
            status=status,
            code=code,
            message=message,
            context_info=context_info,
            help_url=help_url,
            request_id=request_id,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.client_error_context_info import ClientErrorContextInfo
