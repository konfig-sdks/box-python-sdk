# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class MetadataQuery(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Create a search using SQL-like syntax to return items that match specific
metadata.
    """


    class MetaOapg:
        required = {
            "from",
            "ancestor_folder_id",
        }
        
        class properties:
            _from = schemas.StrSchema
            ancestor_folder_id = schemas.StrSchema
            query = schemas.StrSchema
        
            @staticmethod
            def _query_params() -> typing.Type['MetadataQueryQueryParams']:
                return MetadataQueryQueryParams
        
            @staticmethod
            def order_by() -> typing.Type['MetadataQueryOrderBy']:
                return MetadataQueryOrderBy
            
            
            class limit(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            marker = schemas.StrSchema
        
            @staticmethod
            def fields() -> typing.Type['MetadataQueryFields']:
                return MetadataQueryFields
            __annotations__ = {
                "from": _from,
                "ancestor_folder_id": ancestor_folder_id,
                "query": query,
                "query_params": _query_params,
                "order_by": order_by,
                "limit": limit,
                "marker": marker,
                "fields": fields,
            }
    
    ancestor_folder_id: MetaOapg.properties.ancestor_folder_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ancestor_folder_id"]) -> MetaOapg.properties.ancestor_folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query"]) -> MetaOapg.properties.query: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query_params"]) -> 'MetadataQueryQueryParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_by"]) -> 'MetadataQueryOrderBy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marker"]) -> MetaOapg.properties.marker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'MetadataQueryFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "ancestor_folder_id", "query", "query_params", "order_by", "limit", "marker", "fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ancestor_folder_id"]) -> MetaOapg.properties.ancestor_folder_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query"]) -> typing.Union[MetaOapg.properties.query, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query_params"]) -> typing.Union['MetadataQueryQueryParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_by"]) -> typing.Union['MetadataQueryOrderBy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marker"]) -> typing.Union[MetaOapg.properties.marker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['MetadataQueryFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "ancestor_folder_id", "query", "query_params", "order_by", "limit", "marker", "fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ancestor_folder_id: typing.Union[MetaOapg.properties.ancestor_folder_id, str, ],
        query: typing.Union[MetaOapg.properties.query, str, schemas.Unset] = schemas.unset,
        order_by: typing.Union['MetadataQueryOrderBy', schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        marker: typing.Union[MetaOapg.properties.marker, str, schemas.Unset] = schemas.unset,
        fields: typing.Union['MetadataQueryFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetadataQuery':
        return super().__new__(
            cls,
            *args,
            ancestor_folder_id=ancestor_folder_id,
            query=query,
            order_by=order_by,
            limit=limit,
            marker=marker,
            fields=fields,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.metadata_query_fields import MetadataQueryFields
from box_python_sdk.model.metadata_query_order_by import MetadataQueryOrderBy
from box_python_sdk.model.metadata_query_query_params import MetadataQueryQueryParams
