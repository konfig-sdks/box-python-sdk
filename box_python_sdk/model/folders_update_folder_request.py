# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class FoldersUpdateFolderRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['FoldersUpdateFolderRequestTags']:
                return FoldersUpdateFolderRequestTags
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
            name = schemas.StrSchema
            
            
            class sync_state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "synced": "SYNCED",
                        "not_synced": "NOT_SYNCED",
                        "partially_synced": "PARTIALLY_SYNCED",
                    }
                
                @schemas.classproperty
                def SYNCED(cls):
                    return cls("synced")
                
                @schemas.classproperty
                def NOT_SYNCED(cls):
                    return cls("not_synced")
                
                @schemas.classproperty
                def PARTIALLY_SYNCED(cls):
                    return cls("partially_synced")
            can_non_owners_invite = schemas.BoolSchema
        
            @staticmethod
            def parent() -> typing.Type['FoldersUpdateFolderRequestParent']:
                return FoldersUpdateFolderRequestParent
            
            
            class shared_link(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class access(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "open": "OPEN",
                                            "company": "COMPANY",
                                            "collaborators": "COLLABORATORS",
                                        }
                                    
                                    @schemas.classproperty
                                    def OPEN(cls):
                                        return cls("open")
                                    
                                    @schemas.classproperty
                                    def COMPANY(cls):
                                        return cls("company")
                                    
                                    @schemas.classproperty
                                    def COLLABORATORS(cls):
                                        return cls("collaborators")
                                password = schemas.StrSchema
                                vanity_name = schemas.StrSchema
                                unshared_at = schemas.DateTimeSchema
                                
                                
                                class permissions(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            can_download = schemas.BoolSchema
                                            __annotations__ = {
                                                "can_download": can_download,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_download", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_download"]) -> typing.Union[MetaOapg.properties.can_download, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_download", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        can_download: typing.Union[MetaOapg.properties.can_download, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'permissions':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            can_download=can_download,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "access": access,
                                    "password": password,
                                    "vanity_name": vanity_name,
                                    "unshared_at": unshared_at,
                                    "permissions": permissions,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["vanity_name"]) -> MetaOapg.properties.vanity_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["unshared_at"]) -> MetaOapg.properties.unshared_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "password", "vanity_name", "unshared_at", "permissions", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["vanity_name"]) -> typing.Union[MetaOapg.properties.vanity_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["unshared_at"]) -> typing.Union[MetaOapg.properties.unshared_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "password", "vanity_name", "unshared_at", "permissions", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            access: typing.Union[MetaOapg.properties.access, str, schemas.Unset] = schemas.unset,
                            password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
                            vanity_name: typing.Union[MetaOapg.properties.vanity_name, str, schemas.Unset] = schemas.unset,
                            unshared_at: typing.Union[MetaOapg.properties.unshared_at, str, datetime, schemas.Unset] = schemas.unset,
                            permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'all_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                access=access,
                                password=password,
                                vanity_name=vanity_name,
                                unshared_at=unshared_at,
                                permissions=permissions,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'shared_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class folder_upload_email(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class access(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "open": "OPEN",
                                            "collaborators": "COLLABORATORS",
                                        }
                                    
                                    @schemas.classproperty
                                    def OPEN(cls):
                                        return cls("open")
                                    
                                    @schemas.classproperty
                                    def COLLABORATORS(cls):
                                        return cls("collaborators")
                                __annotations__ = {
                                    "access": access,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            access: typing.Union[MetaOapg.properties.access, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'all_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                access=access,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'folder_upload_email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            is_collaboration_restricted_to_enterprise = schemas.BoolSchema
        
            @staticmethod
            def collections() -> typing.Type['FoldersUpdateFolderRequestCollections']:
                return FoldersUpdateFolderRequestCollections
            can_non_owners_view_collaborators = schemas.BoolSchema
            __annotations__ = {
                "tags": tags,
                "description": description,
                "name": name,
                "sync_state": sync_state,
                "can_non_owners_invite": can_non_owners_invite,
                "parent": parent,
                "shared_link": shared_link,
                "folder_upload_email": folder_upload_email,
                "is_collaboration_restricted_to_enterprise": is_collaboration_restricted_to_enterprise,
                "collections": collections,
                "can_non_owners_view_collaborators": can_non_owners_view_collaborators,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'FoldersUpdateFolderRequestTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_state"]) -> MetaOapg.properties.sync_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_non_owners_invite"]) -> MetaOapg.properties.can_non_owners_invite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'FoldersUpdateFolderRequestParent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shared_link"]) -> MetaOapg.properties.shared_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_upload_email"]) -> MetaOapg.properties.folder_upload_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_collaboration_restricted_to_enterprise"]) -> MetaOapg.properties.is_collaboration_restricted_to_enterprise: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections"]) -> 'FoldersUpdateFolderRequestCollections': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_non_owners_view_collaborators"]) -> MetaOapg.properties.can_non_owners_view_collaborators: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "name", "sync_state", "can_non_owners_invite", "parent", "shared_link", "folder_upload_email", "is_collaboration_restricted_to_enterprise", "collections", "can_non_owners_view_collaborators", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['FoldersUpdateFolderRequestTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_state"]) -> typing.Union[MetaOapg.properties.sync_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_non_owners_invite"]) -> typing.Union[MetaOapg.properties.can_non_owners_invite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union['FoldersUpdateFolderRequestParent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shared_link"]) -> typing.Union[MetaOapg.properties.shared_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_upload_email"]) -> typing.Union[MetaOapg.properties.folder_upload_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_collaboration_restricted_to_enterprise"]) -> typing.Union[MetaOapg.properties.is_collaboration_restricted_to_enterprise, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections"]) -> typing.Union['FoldersUpdateFolderRequestCollections', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_non_owners_view_collaborators"]) -> typing.Union[MetaOapg.properties.can_non_owners_view_collaborators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "name", "sync_state", "can_non_owners_invite", "parent", "shared_link", "folder_upload_email", "is_collaboration_restricted_to_enterprise", "collections", "can_non_owners_view_collaborators", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['FoldersUpdateFolderRequestTags', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sync_state: typing.Union[MetaOapg.properties.sync_state, str, schemas.Unset] = schemas.unset,
        can_non_owners_invite: typing.Union[MetaOapg.properties.can_non_owners_invite, bool, schemas.Unset] = schemas.unset,
        parent: typing.Union['FoldersUpdateFolderRequestParent', schemas.Unset] = schemas.unset,
        shared_link: typing.Union[MetaOapg.properties.shared_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        folder_upload_email: typing.Union[MetaOapg.properties.folder_upload_email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        is_collaboration_restricted_to_enterprise: typing.Union[MetaOapg.properties.is_collaboration_restricted_to_enterprise, bool, schemas.Unset] = schemas.unset,
        collections: typing.Union['FoldersUpdateFolderRequestCollections', schemas.Unset] = schemas.unset,
        can_non_owners_view_collaborators: typing.Union[MetaOapg.properties.can_non_owners_view_collaborators, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FoldersUpdateFolderRequest':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            description=description,
            name=name,
            sync_state=sync_state,
            can_non_owners_invite=can_non_owners_invite,
            parent=parent,
            shared_link=shared_link,
            folder_upload_email=folder_upload_email,
            is_collaboration_restricted_to_enterprise=is_collaboration_restricted_to_enterprise,
            collections=collections,
            can_non_owners_view_collaborators=can_non_owners_view_collaborators,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.folders_update_folder_request_collections import FoldersUpdateFolderRequestCollections
from box_python_sdk.model.folders_update_folder_request_parent import FoldersUpdateFolderRequestParent
from box_python_sdk.model.folders_update_folder_request_tags import FoldersUpdateFolderRequestTags
