# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class UploadSession(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An upload session for chunk uploading a file.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "upload_session": "UPLOAD_SESSION",
                    }
                
                @schemas.classproperty
                def UPLOAD_SESSION(cls):
                    return cls("upload_session")
            session_expires_at = schemas.DateTimeSchema
            part_size = schemas.Int64Schema
            total_parts = schemas.Int32Schema
            num_parts_processed = schemas.Int32Schema
            
            
            class session_endpoints(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                upload_part = schemas.StrSchema
                                commit = schemas.StrSchema
                                abort = schemas.StrSchema
                                list_parts = schemas.StrSchema
                                status = schemas.StrSchema
                                log_event = schemas.StrSchema
                                __annotations__ = {
                                    "upload_part": upload_part,
                                    "commit": commit,
                                    "abort": abort,
                                    "list_parts": list_parts,
                                    "status": status,
                                    "log_event": log_event,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["upload_part"]) -> MetaOapg.properties.upload_part: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["commit"]) -> MetaOapg.properties.commit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["abort"]) -> MetaOapg.properties.abort: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["list_parts"]) -> MetaOapg.properties.list_parts: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["log_event"]) -> MetaOapg.properties.log_event: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["upload_part", "commit", "abort", "list_parts", "status", "log_event", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["upload_part"]) -> typing.Union[MetaOapg.properties.upload_part, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union[MetaOapg.properties.commit, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["abort"]) -> typing.Union[MetaOapg.properties.abort, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["list_parts"]) -> typing.Union[MetaOapg.properties.list_parts, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["log_event"]) -> typing.Union[MetaOapg.properties.log_event, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["upload_part", "commit", "abort", "list_parts", "status", "log_event", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            upload_part: typing.Union[MetaOapg.properties.upload_part, str, schemas.Unset] = schemas.unset,
                            commit: typing.Union[MetaOapg.properties.commit, str, schemas.Unset] = schemas.unset,
                            abort: typing.Union[MetaOapg.properties.abort, str, schemas.Unset] = schemas.unset,
                            list_parts: typing.Union[MetaOapg.properties.list_parts, str, schemas.Unset] = schemas.unset,
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            log_event: typing.Union[MetaOapg.properties.log_event, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'all_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                upload_part=upload_part,
                                commit=commit,
                                abort=abort,
                                list_parts=list_parts,
                                status=status,
                                log_event=log_event,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'session_endpoints':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "type": type,
                "session_expires_at": session_expires_at,
                "part_size": part_size,
                "total_parts": total_parts,
                "num_parts_processed": num_parts_processed,
                "session_endpoints": session_endpoints,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_expires_at"]) -> MetaOapg.properties.session_expires_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["part_size"]) -> MetaOapg.properties.part_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_parts"]) -> MetaOapg.properties.total_parts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_parts_processed"]) -> MetaOapg.properties.num_parts_processed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_endpoints"]) -> MetaOapg.properties.session_endpoints: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "session_expires_at", "part_size", "total_parts", "num_parts_processed", "session_endpoints", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_expires_at"]) -> typing.Union[MetaOapg.properties.session_expires_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["part_size"]) -> typing.Union[MetaOapg.properties.part_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_parts"]) -> typing.Union[MetaOapg.properties.total_parts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_parts_processed"]) -> typing.Union[MetaOapg.properties.num_parts_processed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_endpoints"]) -> typing.Union[MetaOapg.properties.session_endpoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "session_expires_at", "part_size", "total_parts", "num_parts_processed", "session_endpoints", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        session_expires_at: typing.Union[MetaOapg.properties.session_expires_at, str, datetime, schemas.Unset] = schemas.unset,
        part_size: typing.Union[MetaOapg.properties.part_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_parts: typing.Union[MetaOapg.properties.total_parts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        num_parts_processed: typing.Union[MetaOapg.properties.num_parts_processed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        session_endpoints: typing.Union[MetaOapg.properties.session_endpoints, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadSession':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            session_expires_at=session_expires_at,
            part_size=part_size,
            total_parts=total_parts,
            num_parts_processed=num_parts_processed,
            session_endpoints=session_endpoints,
            _configuration=_configuration,
            **kwargs,
        )
