# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class FolderFull(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A full representation of a folder, as can be returned from any
folder API endpoints by default
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class tags(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    items = schemas.StrSchema
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'tags':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class sync_state(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def SYNCED(cls):
                                    return cls("synced")
                                
                                @schemas.classproperty
                                def NOT_SYNCED(cls):
                                    return cls("not_synced")
                                
                                @schemas.classproperty
                                def PARTIALLY_SYNCED(cls):
                                    return cls("partially_synced")
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'sync_state':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    has_collaborations = schemas.BoolSchema
                    
                    
                    class permissions(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.ComposedBase,
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "can_upload",
                                    }
                                    
                                    
                                    class all_of_0(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "can_invite_collaborator",
                                                "can_set_share_access",
                                                "can_delete",
                                                "can_share",
                                                "can_rename",
                                                "can_download",
                                            }
                                            
                                            class properties:
                                                can_delete = schemas.BoolSchema
                                                can_download = schemas.BoolSchema
                                                can_invite_collaborator = schemas.BoolSchema
                                                can_rename = schemas.BoolSchema
                                                can_set_share_access = schemas.BoolSchema
                                                can_share = schemas.BoolSchema
                                                __annotations__ = {
                                                    "can_delete": can_delete,
                                                    "can_download": can_download,
                                                    "can_invite_collaborator": can_invite_collaborator,
                                                    "can_rename": can_rename,
                                                    "can_set_share_access": can_set_share_access,
                                                    "can_share": can_share,
                                                }
                                        
                                        can_invite_collaborator: MetaOapg.properties.can_invite_collaborator
                                        can_set_share_access: MetaOapg.properties.can_set_share_access
                                        can_delete: MetaOapg.properties.can_delete
                                        can_share: MetaOapg.properties.can_share
                                        can_rename: MetaOapg.properties.can_rename
                                        can_download: MetaOapg.properties.can_download
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_invite_collaborator"]) -> MetaOapg.properties.can_invite_collaborator: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_rename"]) -> MetaOapg.properties.can_rename: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_set_share_access"]) -> MetaOapg.properties.can_set_share_access: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_share"]) -> MetaOapg.properties.can_share: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_delete", "can_download", "can_invite_collaborator", "can_rename", "can_set_share_access", "can_share", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_download"]) -> MetaOapg.properties.can_download: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_invite_collaborator"]) -> MetaOapg.properties.can_invite_collaborator: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_rename"]) -> MetaOapg.properties.can_rename: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_set_share_access"]) -> MetaOapg.properties.can_set_share_access: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_share"]) -> MetaOapg.properties.can_share: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_delete", "can_download", "can_invite_collaborator", "can_rename", "can_set_share_access", "can_share", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            can_invite_collaborator: typing.Union[MetaOapg.properties.can_invite_collaborator, bool, ],
                                            can_set_share_access: typing.Union[MetaOapg.properties.can_set_share_access, bool, ],
                                            can_delete: typing.Union[MetaOapg.properties.can_delete, bool, ],
                                            can_share: typing.Union[MetaOapg.properties.can_share, bool, ],
                                            can_rename: typing.Union[MetaOapg.properties.can_rename, bool, ],
                                            can_download: typing.Union[MetaOapg.properties.can_download, bool, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_0':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                can_invite_collaborator=can_invite_collaborator,
                                                can_set_share_access=can_set_share_access,
                                                can_delete=can_delete,
                                                can_share=can_share,
                                                can_rename=can_rename,
                                                can_download=can_download,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class all_of_1(
                                        schemas.AnyTypeSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                can_upload = schemas.BoolSchema
                                                __annotations__ = {
                                                    "can_upload": can_upload,
                                                }
                                    
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["can_upload"]) -> MetaOapg.properties.can_upload: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_upload", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["can_upload"]) -> typing.Union[MetaOapg.properties.can_upload, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_upload", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            can_upload: typing.Union[MetaOapg.properties.can_upload, bool, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'all_of_1':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                can_upload=can_upload,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    @classmethod
                                    @functools.lru_cache()
                                    def all_of(cls):
                                        # we need this here to make our import statements work
                                        # we must store _composed_schemas in here so the code is only run
                                        # when we invoke this method. If we kept this at the class
                                        # level we would get an error because the class level
                                        # code would be run when this module is imported, and these composed
                                        # classes don't exist yet because their module has not finished
                                        # loading
                                        return [
                                            cls.all_of_0,
                                            cls.all_of_1,
                                        ]
                            
                                
                                can_upload: schemas.AnyTypeSchema
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    can_upload: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        can_upload=can_upload,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'permissions':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class can_non_owners_invite(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.BoolSchema
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'can_non_owners_invite':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    is_externally_owned = schemas.BoolSchema
                    
                    
                    class metadata(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class additional_properties(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def additional_properties() -> typing.Type['MetadataBase']:
                                                return MetadataBase
                                        
                                        def __getitem__(self, name: typing.Union[str, ]) -> 'MetadataBase':
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        def get_item_oapg(self, name: typing.Union[str, ]) -> 'MetadataBase':
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: 'MetadataBase',
                                        ) -> 'additional_properties':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                
                                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    return super().get_item_oapg(name)
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'metadata':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class is_collaboration_restricted_to_enterprise(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_0 = schemas.BoolSchema
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'is_collaboration_restricted_to_enterprise':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class allowed_shared_link_access_levels(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def OPEN(cls):
                                    return cls("open")
                                
                                @schemas.classproperty
                                def COMPANY(cls):
                                    return cls("company")
                                
                                @schemas.classproperty
                                def COLLABORATORS(cls):
                                    return cls("collaborators")
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'allowed_shared_link_access_levels':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class allowed_invitee_roles(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def EDITOR(cls):
                                    return cls("editor")
                                
                                @schemas.classproperty
                                def VIEWER(cls):
                                    return cls("viewer")
                                
                                @schemas.classproperty
                                def PREVIEWER(cls):
                                    return cls("previewer")
                                
                                @schemas.classproperty
                                def UPLOADER(cls):
                                    return cls("uploader")
                                
                                @schemas.classproperty
                                def PREVIEWER_UPLOADER(cls):
                                    return cls("previewer uploader")
                                
                                @schemas.classproperty
                                def VIEWER_UPLOADER(cls):
                                    return cls("viewer uploader")
                                
                                @schemas.classproperty
                                def COOWNER(cls):
                                    return cls("co-owner")
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'allowed_invitee_roles':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class watermark_info(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        is_watermarked = schemas.BoolSchema
                                        __annotations__ = {
                                            "is_watermarked": is_watermarked,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_watermarked"]) -> MetaOapg.properties.is_watermarked: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_watermarked", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_watermarked"]) -> typing.Union[MetaOapg.properties.is_watermarked, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_watermarked", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    is_watermarked: typing.Union[MetaOapg.properties.is_watermarked, bool, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        is_watermarked=is_watermarked,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'watermark_info':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class is_accessible_via_shared_link(
                        schemas.EnumBase,
                        schemas.BoolSchema
                    ):
                        
                        @schemas.classproperty
                        def TRUE(cls):
                            return cls(True)
                        
                        @schemas.classproperty
                        def FALSE(cls):
                            return cls(False)
                    can_non_owners_view_collaborators = schemas.BoolSchema
                    
                    
                    class classification(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        name = schemas.StrSchema
                                        definition = schemas.StrSchema
                                        color = schemas.StrSchema
                                        __annotations__ = {
                                            "name": name,
                                            "definition": definition,
                                            "color": color,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "definition", "color", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "definition", "color", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                    definition: typing.Union[MetaOapg.properties.definition, str, schemas.Unset] = schemas.unset,
                                    color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        name=name,
                                        definition=definition,
                                        color=color,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            all_of_1 = schemas.AnyTypeSchema
                            all_of_2 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                    cls.all_of_1,
                                    cls.all_of_2,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'classification':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "tags": tags,
                        "sync_state": sync_state,
                        "has_collaborations": has_collaborations,
                        "permissions": permissions,
                        "can_non_owners_invite": can_non_owners_invite,
                        "is_externally_owned": is_externally_owned,
                        "metadata": metadata,
                        "is_collaboration_restricted_to_enterprise": is_collaboration_restricted_to_enterprise,
                        "allowed_shared_link_access_levels": allowed_shared_link_access_levels,
                        "allowed_invitee_roles": allowed_invitee_roles,
                        "watermark_info": watermark_info,
                        "is_accessible_via_shared_link": is_accessible_via_shared_link,
                        "can_non_owners_view_collaborators": can_non_owners_view_collaborators,
                        "classification": classification,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sync_state"]) -> MetaOapg.properties.sync_state: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["has_collaborations"]) -> MetaOapg.properties.has_collaborations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["can_non_owners_invite"]) -> MetaOapg.properties.can_non_owners_invite: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_externally_owned"]) -> MetaOapg.properties.is_externally_owned: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_collaboration_restricted_to_enterprise"]) -> MetaOapg.properties.is_collaboration_restricted_to_enterprise: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["allowed_shared_link_access_levels"]) -> MetaOapg.properties.allowed_shared_link_access_levels: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["allowed_invitee_roles"]) -> MetaOapg.properties.allowed_invitee_roles: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["watermark_info"]) -> MetaOapg.properties.watermark_info: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_accessible_via_shared_link"]) -> MetaOapg.properties.is_accessible_via_shared_link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["can_non_owners_view_collaborators"]) -> MetaOapg.properties.can_non_owners_view_collaborators: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "sync_state", "has_collaborations", "permissions", "can_non_owners_invite", "is_externally_owned", "metadata", "is_collaboration_restricted_to_enterprise", "allowed_shared_link_access_levels", "allowed_invitee_roles", "watermark_info", "is_accessible_via_shared_link", "can_non_owners_view_collaborators", "classification", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sync_state"]) -> typing.Union[MetaOapg.properties.sync_state, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["has_collaborations"]) -> typing.Union[MetaOapg.properties.has_collaborations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["can_non_owners_invite"]) -> typing.Union[MetaOapg.properties.can_non_owners_invite, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_externally_owned"]) -> typing.Union[MetaOapg.properties.is_externally_owned, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_collaboration_restricted_to_enterprise"]) -> typing.Union[MetaOapg.properties.is_collaboration_restricted_to_enterprise, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["allowed_shared_link_access_levels"]) -> typing.Union[MetaOapg.properties.allowed_shared_link_access_levels, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["allowed_invitee_roles"]) -> typing.Union[MetaOapg.properties.allowed_invitee_roles, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["watermark_info"]) -> typing.Union[MetaOapg.properties.watermark_info, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_accessible_via_shared_link"]) -> typing.Union[MetaOapg.properties.is_accessible_via_shared_link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["can_non_owners_view_collaborators"]) -> typing.Union[MetaOapg.properties.can_non_owners_view_collaborators, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "sync_state", "has_collaborations", "permissions", "can_non_owners_invite", "is_externally_owned", "metadata", "is_collaboration_restricted_to_enterprise", "allowed_shared_link_access_levels", "allowed_invitee_roles", "watermark_info", "is_accessible_via_shared_link", "can_non_owners_view_collaborators", "classification", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                sync_state: typing.Union[MetaOapg.properties.sync_state, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                has_collaborations: typing.Union[MetaOapg.properties.has_collaborations, bool, schemas.Unset] = schemas.unset,
                permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                can_non_owners_invite: typing.Union[MetaOapg.properties.can_non_owners_invite, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                is_externally_owned: typing.Union[MetaOapg.properties.is_externally_owned, bool, schemas.Unset] = schemas.unset,
                metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                is_collaboration_restricted_to_enterprise: typing.Union[MetaOapg.properties.is_collaboration_restricted_to_enterprise, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                allowed_shared_link_access_levels: typing.Union[MetaOapg.properties.allowed_shared_link_access_levels, list, tuple, schemas.Unset] = schemas.unset,
                allowed_invitee_roles: typing.Union[MetaOapg.properties.allowed_invitee_roles, list, tuple, schemas.Unset] = schemas.unset,
                watermark_info: typing.Union[MetaOapg.properties.watermark_info, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                is_accessible_via_shared_link: typing.Union[MetaOapg.properties.is_accessible_via_shared_link, bool, schemas.Unset] = schemas.unset,
                can_non_owners_view_collaborators: typing.Union[MetaOapg.properties.can_non_owners_view_collaborators, bool, schemas.Unset] = schemas.unset,
                classification: typing.Union[MetaOapg.properties.classification, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    tags=tags,
                    sync_state=sync_state,
                    has_collaborations=has_collaborations,
                    permissions=permissions,
                    can_non_owners_invite=can_non_owners_invite,
                    is_externally_owned=is_externally_owned,
                    metadata=metadata,
                    is_collaboration_restricted_to_enterprise=is_collaboration_restricted_to_enterprise,
                    allowed_shared_link_access_levels=allowed_shared_link_access_levels,
                    allowed_invitee_roles=allowed_invitee_roles,
                    watermark_info=watermark_info,
                    is_accessible_via_shared_link=is_accessible_via_shared_link,
                    can_non_owners_view_collaborators=can_non_owners_view_collaborators,
                    classification=classification,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Folder,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FolderFull':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.folder import Folder
from box_python_sdk.model.metadata_base import MetadataBase
