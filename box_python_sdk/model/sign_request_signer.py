# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class SignRequestSigner(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The schema for a Signer in a GET Sign Request request body
    """


    class MetaOapg:
        required = {
            "email",
        }
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    has_viewed_document = schemas.BoolSchema
                    
                    
                    class signer_decision(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class type(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "signed": "SIGNED",
                                            "declined": "DECLINED",
                                        }
                                    
                                    @schemas.classproperty
                                    def SIGNED(cls):
                                        return cls("signed")
                                    
                                    @schemas.classproperty
                                    def DECLINED(cls):
                                        return cls("declined")
                                finalized_at = schemas.DateTimeSchema
                                
                                
                                class additional_info(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'additional_info':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "type": type,
                                    "finalized_at": finalized_at,
                                    "additional_info": additional_info,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["finalized_at"]) -> MetaOapg.properties.finalized_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["additional_info"]) -> MetaOapg.properties.additional_info: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "finalized_at", "additional_info", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["finalized_at"]) -> typing.Union[MetaOapg.properties.finalized_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["additional_info"]) -> typing.Union[MetaOapg.properties.additional_info, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "finalized_at", "additional_info", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                            finalized_at: typing.Union[MetaOapg.properties.finalized_at, str, datetime, schemas.Unset] = schemas.unset,
                            additional_info: typing.Union[MetaOapg.properties.additional_info, None, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'signer_decision':
                            return super().__new__(
                                cls,
                                *args,
                                type=type,
                                finalized_at=finalized_at,
                                additional_info=additional_info,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class inputs(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['SignRequestSignerInput']:
                                return SignRequestSignerInput
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['SignRequestSignerInput'], typing.List['SignRequestSignerInput']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'inputs':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'SignRequestSignerInput':
                            return super().__getitem__(i)
                    
                    
                    class embed_url(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'embed_url':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class iframeable_embed_url(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'iframeable_embed_url':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "has_viewed_document": has_viewed_document,
                        "signer_decision": signer_decision,
                        "inputs": inputs,
                        "embed_url": embed_url,
                        "iframeable_embed_url": iframeable_embed_url,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["has_viewed_document"]) -> MetaOapg.properties.has_viewed_document: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signer_decision"]) -> MetaOapg.properties.signer_decision: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["inputs"]) -> MetaOapg.properties.inputs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["embed_url"]) -> MetaOapg.properties.embed_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["iframeable_embed_url"]) -> MetaOapg.properties.iframeable_embed_url: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["has_viewed_document", "signer_decision", "inputs", "embed_url", "iframeable_embed_url", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["has_viewed_document"]) -> typing.Union[MetaOapg.properties.has_viewed_document, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signer_decision"]) -> typing.Union[MetaOapg.properties.signer_decision, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["inputs"]) -> typing.Union[MetaOapg.properties.inputs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["embed_url"]) -> typing.Union[MetaOapg.properties.embed_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["iframeable_embed_url"]) -> typing.Union[MetaOapg.properties.iframeable_embed_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["has_viewed_document", "signer_decision", "inputs", "embed_url", "iframeable_embed_url", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                has_viewed_document: typing.Union[MetaOapg.properties.has_viewed_document, bool, schemas.Unset] = schemas.unset,
                signer_decision: typing.Union[MetaOapg.properties.signer_decision, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                inputs: typing.Union[MetaOapg.properties.inputs, list, tuple, schemas.Unset] = schemas.unset,
                embed_url: typing.Union[MetaOapg.properties.embed_url, None, str, schemas.Unset] = schemas.unset,
                iframeable_embed_url: typing.Union[MetaOapg.properties.iframeable_embed_url, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    has_viewed_document=has_viewed_document,
                    signer_decision=signer_decision,
                    inputs=inputs,
                    embed_url=embed_url,
                    iframeable_embed_url=iframeable_embed_url,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SignRequestCreateSigner,
                cls.all_of_1,
            ]

    
    email: schemas.AnyTypeSchema

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignRequestSigner':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.sign_request_create_signer import SignRequestCreateSigner
from box_python_sdk.model.sign_request_signer_input import SignRequestSignerInput
