# coding: utf-8

"""
    Box Platform API

    [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

    The version of the OpenAPI document: 2.0.0
    Contact: devrel@box.com
    Created by: https://box.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from box_python_sdk import schemas  # noqa: F401


class RetentionPolicy(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A retention policy blocks permanent deletion of content
for a specified amount of time. Admins can create retention
policies and then later assign them to specific folders, metadata
templates, or their entire enterprise.  To use this feature, you must
have the manage retention policies scope enabled
for your API key via your application management console.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    description = schemas.StrSchema
                    
                    
                    class policy_type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def FINITE(cls):
                            return cls("finite")
                        
                        @schemas.classproperty
                        def INDEFINITE(cls):
                            return cls("indefinite")
                    
                    
                    class retention_type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def MODIFIABLE(cls):
                            return cls("modifiable")
                        
                        @schemas.classproperty
                        def NON_MODIFIABLE(cls):
                            return cls("non_modifiable")
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ACTIVE(cls):
                            return cls("active")
                        
                        @schemas.classproperty
                        def RETIRED(cls):
                            return cls("retired")
                    
                    
                    class created_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserMini,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'created_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    created_at = schemas.DateTimeSchema
                    modified_at = schemas.DateTimeSchema
                    can_owner_extend_retention = schemas.BoolSchema
                    are_owners_notified = schemas.BoolSchema
                    
                    
                    class custom_notification_recipients(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UserMini']:
                                return UserMini
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['UserMini'], typing.List['UserMini']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'custom_notification_recipients':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UserMini':
                            return super().__getitem__(i)
                    
                    
                    class assignment_counts(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                enterprise = schemas.Int64Schema
                                folder = schemas.Int64Schema
                                metadata_template = schemas.Int64Schema
                                __annotations__ = {
                                    "enterprise": enterprise,
                                    "folder": folder,
                                    "metadata_template": metadata_template,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["enterprise"]) -> MetaOapg.properties.enterprise: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["metadata_template"]) -> MetaOapg.properties.metadata_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["enterprise", "folder", "metadata_template", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["enterprise"]) -> typing.Union[MetaOapg.properties.enterprise, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> typing.Union[MetaOapg.properties.folder, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["metadata_template"]) -> typing.Union[MetaOapg.properties.metadata_template, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enterprise", "folder", "metadata_template", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            enterprise: typing.Union[MetaOapg.properties.enterprise, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            folder: typing.Union[MetaOapg.properties.folder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            metadata_template: typing.Union[MetaOapg.properties.metadata_template, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'assignment_counts':
                            return super().__new__(
                                cls,
                                *args,
                                enterprise=enterprise,
                                folder=folder,
                                metadata_template=metadata_template,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "description": description,
                        "policy_type": policy_type,
                        "retention_type": retention_type,
                        "status": status,
                        "created_by": created_by,
                        "created_at": created_at,
                        "modified_at": modified_at,
                        "can_owner_extend_retention": can_owner_extend_retention,
                        "are_owners_notified": are_owners_notified,
                        "custom_notification_recipients": custom_notification_recipients,
                        "assignment_counts": assignment_counts,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["policy_type"]) -> MetaOapg.properties.policy_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["retention_type"]) -> MetaOapg.properties.retention_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["can_owner_extend_retention"]) -> MetaOapg.properties.can_owner_extend_retention: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["are_owners_notified"]) -> MetaOapg.properties.are_owners_notified: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_notification_recipients"]) -> MetaOapg.properties.custom_notification_recipients: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assignment_counts"]) -> MetaOapg.properties.assignment_counts: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "policy_type", "retention_type", "status", "created_by", "created_at", "modified_at", "can_owner_extend_retention", "are_owners_notified", "custom_notification_recipients", "assignment_counts", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["policy_type"]) -> typing.Union[MetaOapg.properties.policy_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["retention_type"]) -> typing.Union[MetaOapg.properties.retention_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["can_owner_extend_retention"]) -> typing.Union[MetaOapg.properties.can_owner_extend_retention, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["are_owners_notified"]) -> typing.Union[MetaOapg.properties.are_owners_notified, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_notification_recipients"]) -> typing.Union[MetaOapg.properties.custom_notification_recipients, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assignment_counts"]) -> typing.Union[MetaOapg.properties.assignment_counts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "policy_type", "retention_type", "status", "created_by", "created_at", "modified_at", "can_owner_extend_retention", "are_owners_notified", "custom_notification_recipients", "assignment_counts", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                policy_type: typing.Union[MetaOapg.properties.policy_type, str, schemas.Unset] = schemas.unset,
                retention_type: typing.Union[MetaOapg.properties.retention_type, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, str, datetime, schemas.Unset] = schemas.unset,
                can_owner_extend_retention: typing.Union[MetaOapg.properties.can_owner_extend_retention, bool, schemas.Unset] = schemas.unset,
                are_owners_notified: typing.Union[MetaOapg.properties.are_owners_notified, bool, schemas.Unset] = schemas.unset,
                custom_notification_recipients: typing.Union[MetaOapg.properties.custom_notification_recipients, list, tuple, schemas.Unset] = schemas.unset,
                assignment_counts: typing.Union[MetaOapg.properties.assignment_counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    policy_type=policy_type,
                    retention_type=retention_type,
                    status=status,
                    created_by=created_by,
                    created_at=created_at,
                    modified_at=modified_at,
                    can_owner_extend_retention=can_owner_extend_retention,
                    are_owners_notified=are_owners_notified,
                    custom_notification_recipients=custom_notification_recipients,
                    assignment_counts=assignment_counts,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                RetentionPolicyMini,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RetentionPolicy':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from box_python_sdk.model.retention_policy_mini import RetentionPolicyMini
from box_python_sdk.model.user_mini import UserMini
